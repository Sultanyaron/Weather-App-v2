{"version":3,"sources":["assets/images/celsius.svg","assets/images/fahrenheit.svg","store/reducers/userSettings.js","store/actions/actionTypes.js","containers/Home/Home.js","components/Navigation/NavLinks/NavLinks.js","components/Logo/Logo.js","components/UI/TempCheckBox/TempCheckBox.js","store/actions/userSettings.js","components/Navigation/Navigation.js","components/Footer/Footer.js","hoc/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","metric","darkTheme","reducer","state","action","type","Home","props","className","NavLinks","to","exact","activeClassName","Logo","TempCheckBox","dispatch","useDispatch","useSelector","userSettings","tempSignPath","celcius","fahrenheit","onClick","src","alt","Navigation","Fragment","Footer","Layout","children","Favorites","React","lazy","console","log","App","routes","path","component","fallback","Boolean","window","location","hostname","match","composeEnhancers","compose","rootReducer","combineReducers","currentCity","currentCityReducer","favorites","favoriteReducer","userSettingsReducer","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,+wBCE3C,IAAMC,EAAe,CACjBC,QAAQ,EACRC,WAAW,GAoBAC,EAhBC,WAAqC,IAAnCC,EAAkC,uDAA1BJ,EAAcK,EAAY,uCAChD,OAAQA,EAAOC,MACX,ICVmB,cDWf,OAAO,EAAP,GACOF,EADP,CAEIH,QAASG,EAAMH,SAEvB,ICdoB,eDehB,OAAO,EAAP,GACOG,EADP,CAEIF,WAAYE,EAAMF,YAE1B,QAAS,OAAOE,I,eETTG,EARF,SAAAC,GAET,OACA,yBAAKC,UAAU,QAAf,SC0BWC,EA5BE,WAGb,OACI,wBAAID,UAAU,oBACV,wBAAIA,UAAU,oBACV,kBAAC,IAAD,CACIE,GAAG,IACHC,OAAK,EACLH,UAAU,SACVI,gBAAgB,4BAJpB,SASJ,wBAAIJ,UAAU,oBACV,kBAAC,IAAD,CACIE,GAAG,aACHE,gBAAgB,4BAFpB,gBCTDC,EATF,WAET,OACI,yBAAKL,UAAU,QACX,wBAAIA,UAAU,eAAd,oB,kCCwBGM,EAxBM,SAAAP,GACjB,IAAMQ,EAAWC,cACXhB,EAASiB,aAAY,SAACd,GAAD,OAAWA,EAAMe,aAAalB,UAQrDmB,EAAgBC,IAMpB,OAJMpB,IACFmB,EAAeE,KAIf,yBAAKb,UAAU,eAAec,QAXR,WAHCP,ECNpB,CACHV,KLJmB,kBIwBf,uBAAGG,UAAU,uBAAb,eACA,yBAAKA,UAAU,oBAAoBe,IAAKJ,EAAcK,IAAI,oBEHvDC,EAfI,SAAAlB,GACf,OACI,yBAAKC,UAAU,cACX,kBAAC,IAAMkB,SAAP,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKlB,UAAU,wBACX,kBAAC,EAAD,UCHLmB,EATA,WACX,OACI,wCCaOC,EAZA,SAAArB,GAEX,OACI,kBAAC,IAAMmB,SAAP,KACI,kBAAC,EAAD,MAEEnB,EAAMsB,SACR,kBAAC,EAAD,QCNNC,EAAYC,IAAMC,MAAK,WAGzB,OAFAC,QAAQC,IAAI,0BAEL,gCAwBIC,EApBH,SAAA5B,GAGR,IAAI6B,EACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,aAAaC,UAAWR,IACpC,kBAAC,IAAD,CAAOO,KAAK,IAAIC,UAAWhC,IAC3B,kBAAC,IAAD,CAAUI,GAAG,OAIrB,OACI,yBAAKF,UAAU,OACX,kBAAC,EAAD,KACI,kBAAC,WAAD,CAAU+B,SAAU,0CAApB,IAA0CH,EAA1C,QCfII,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFN,IAAMC,EAAkHC,IAElHC,EAAcC,YAAgB,CAChCC,YAAaC,IACbC,UAAYC,IACZlC,aAAcmC,IAGZC,EAAiBC,cAEjBC,EAAQC,YAAYV,EAAaF,EACnCa,YAAgBC,IAAOL,KAGrBM,EACF,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,IAAD,KACI,kBAAC,EAAD,QAKZK,IAASC,OAAOF,EAAKG,SAASC,eAAe,SD2FvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.53d5e780.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/celsius.802510af.svg\";","module.exports = __webpack_public_path__ + \"static/media/fahrenheit.0a3403d1.svg\";","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    metric: true,\r\n    darkTheme: false\r\n\r\n}\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_TEMP:\r\n            return {\r\n                ...state,\r\n                metric: !state.metric\r\n            };\r\n        case actionTypes.CHANGE_THEME:\r\n            return {\r\n                ...state,\r\n                darkTheme: !state.darkTheme\r\n            }\r\n        default: return state\r\n    };\r\n};\r\n\r\nexport default reducer;","export const CHANGE_TEMP = 'CHANGE_TEMP';\r\nexport const CHANGE_THEME = 'CHANGE_THEME'; ","import React from 'react'; \r\n\r\n\r\nconst Home = props => {\r\n\r\n    return (\r\n    <div className='Home'>HOME</div>\r\n    );\r\n};\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst NavLinks = () => {\r\n\r\n\r\n    return (\r\n        <ul className=\"navigation__list\">\r\n            <li className='navigation__item'>\r\n                <NavLink\r\n                    to=\"/\"\r\n                    exact\r\n                    className='123456'\r\n                    activeClassName=\"navigation__item--active\"\r\n                    >Home\r\n                </NavLink>\r\n            </li>\r\n\r\n            <li className='navigation__item'>\r\n                <NavLink\r\n                    to=\"/favorites\"\r\n                    activeClassName=\"navigation__item--active\"\r\n                    >Favorites\r\n                </NavLink>\r\n            </li>\r\n            \r\n            \r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default NavLinks;","import React from 'react';\r\n\r\nconst Logo = () => {\r\n\r\n    return (\r\n        <div className=\"logo\">\r\n            <h1 className=\"logo__title\">Herolo Weather</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\nimport celcius from '../../../assets/images/celsius.svg';\r\nimport fahrenheit  from '../../../assets/images/fahrenheit.svg'\r\nimport { useDispatch, useSelector } from 'react-redux'; \r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\nconst TempCheckBox = props => {\r\n    const dispatch = useDispatch();\r\n    const metric = useSelector((state) => state.userSettings.metric);\r\n    const onChangeTemp = () => dispatch(actions.changeTemp());\r\n\r\n\r\n    const changeTempHandler = () => {\r\n        onChangeTemp();\r\n    };\r\n\r\n    let tempSignPath =  celcius;\r\n\r\n    if ( !metric ) {\r\n        tempSignPath = fahrenheit;\r\n    };\r\n\r\n    return (\r\n        <div className=\"tempCheckBox\" onClick={changeTempHandler}>\r\n            <p className='tempCheckBox__title'>Temperature</p>\r\n            <img className='tempCheckBox__img' src={tempSignPath} alt='Temp Selector'></img>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TempCheckBox;","import * as actionTypes from './actionTypes';\r\n\r\nexport const changeTemp = () => {\r\n    return {\r\n        type: actionTypes.CHANGE_TEMP\r\n    };\r\n};\r\n\r\nexport const changeTheme = () => {\r\n    return {\r\n        type: actionTypes.CHANGE_THEME\r\n    };\r\n};","import React from 'react';\r\n\r\n\r\nimport NavLinks from './NavLinks/NavLinks'\r\nimport Logo from '../Logo/Logo';\r\nimport TempCheckBox from '../UI/TempCheckBox/TempCheckBox'\r\n\r\nconst Navigation = props => {\r\n    return (\r\n        <div className=\"navigation\">\r\n            <React.Fragment> \r\n                <Logo />\r\n                <NavLinks />\r\n                <div className=\"navigation__settings\">\r\n                    <TempCheckBox />\r\n                    {/* <ThemeSelector /> */}\r\n                </div>\r\n            </React.Fragment>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div>\r\n            FOOTER\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nimport Navigation from '../components/Navigation/Navigation';\r\nimport Footer from '../components/Footer/Footer';\r\n\r\nconst Layout = props => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Navigation />\r\n            {/* Pages switcher with Lazy Loading of Favorite component */}\r\n            { props.children }\r\n            <Footer />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Layout;","import React, { Suspense } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\n\r\nimport Home from './containers/Home/Home';\r\nimport Layout from './hoc/Layout';\r\n\r\nconst Favorites = React.lazy(() => {\r\n    console.log('Favorites - Lazy loded');\r\n    \r\n    return import('./containers/Favorites/Favorites');\r\n});\r\n\r\n\r\nconst App = props => {\r\n\r\n\r\n    let routes = (\r\n        <Switch>\r\n            <Route path=\"/favorites\" component={Favorites}  />\r\n            <Route path=\"/\" component={Home} />\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n    ); \r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Layout>\r\n                <Suspense fallback={<p>Loading...</p>}> { routes } </Suspense>\r\n            </Layout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { compose, combineReducers, createStore, applyMiddleware } from 'redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\nimport currentCityReducer from './store/reducers/currentCity';\nimport favoriteReducer from './store/reducers/favorites';\nimport userSettingsReducer from './store/reducers/userSettings';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers({\n    currentCity: currentCityReducer,\n    favorites : favoriteReducer,\n    userSettings: userSettingsReducer\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk, sagaMiddleware)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}