{"version":3,"sources":["components/Favorite/Favorite.js","containers/Favorites/Favorites.js"],"names":["withRouter","props","cityData","data","WeatherIcon","Temperature","WeatherText","metric","useSelector","state","userSettings","console","log","icon","getIconPath","dispatch","useDispatch","temp","Math","round","Metric","Value","Imperial","className","onClick","actions","cityName","cityKey","history","push","FavoriteHeart","height","width","src","alt","Favorites","fetchFavoritesLoading","favorites","fetchedFavorites","favoritesCityKeys","i","length","onFetchFavoritesData","useCallback","onClearFetchedFavorites","useEffect","favoriteList","Spinner","map","fav","currentCityData","filter","item","key"],"mappings":"oMA8CeA,eAvCE,SAACC,GAAW,IAAD,EAE0BA,EAAMC,SAASC,KAAK,GAA9DC,EAFgB,EAEhBA,YAAaC,EAFG,EAEHA,YAAaC,EAFV,EAEUA,YAC1BC,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,gBAAtCH,OAERI,QAAQC,IAAIX,EAAMC,UAClB,IAAMW,EAAOC,YAAYV,GACnBW,EAAWC,cAEbC,EAAOC,KAAKC,MAAMd,EAAYe,OAAOC,OAEpCd,IACDU,EAAOZ,EAAYiB,SAASD,OAQhC,OACI,yBAAKE,UAAU,kBAAkBC,QANb,WAPGT,EAASU,IAA2BxB,EAAMyB,SAAUzB,EAAM0B,UASjF1B,EAAM2B,QAAQC,KAAK,OAKf,kBAACC,EAAA,EAAD,CACIH,QAAS1B,EAAM0B,QACfD,SAAUzB,EAAMyB,SAChBK,OAAO,OACPC,MAAM,SACV,uBAAGT,UAAU,oBAAoBtB,EAAMyB,UACvC,yBAAKH,UAAU,sBACX,yBAAKA,UAAU,kBAAkBU,IAAKpB,EAAMqB,IAAK5B,IACjD,yBAAKiB,UAAU,wBACX,uBAAGA,UAAU,mBAAmBN,EAAhC,QACA,uBAAGM,UAAU,mBAAmBjB,S,QCsBrC6B,UAtDG,SAAAlC,GAKd,IALwB,IAEhBmC,EAA0B5B,aAAY,SAAAC,GAAK,OAAIA,EAAM4B,aAArDD,sBAFe,EAGiB5B,aAAY,SAAAC,GAAK,OAAIA,EAAM4B,aAA3DA,EAHe,EAGfA,UAAWC,EAHI,EAGJA,iBACbC,EAAoB,GACjBC,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IAClCD,EAAkBV,KAAKQ,EAAUG,GAAGb,SAExC,IAAMZ,EAAWC,cACX0B,EAAuBC,uBAAY,SAACJ,GAAD,OAAuBxB,EAASU,IAAuBc,MAAoB,CAACxB,IAC/G6B,EAA0BD,uBAAY,kBAAM5B,EAASU,SAAiC,CAACV,IAE7F8B,qBAAU,WACNH,EAAqBH,GACrB5B,QAAQC,IAAI,yBAEb,CAAC8B,IAEJG,qBAAU,WACN,OAAO,WAEHD,OAEL,CAACA,IAGJ,IAAIE,EAAe,kBAACC,EAAA,EAAD,MAmBnB,OAjBKX,IACDU,EACIT,EAAUW,KAAI,SAAAC,GACV,IAAMC,EAAkBZ,EAAiBa,QAAO,SAAAC,GAAI,OAAIH,EAAItB,UAAYyB,EAAKzB,WAAS,GACtF,OAAO,kBAAC,EAAD,CACH0B,IAAKJ,EAAItB,QACTzB,SAAUgD,EACVxB,SAAUuB,EAAIvB,SACdC,QAASsB,EAAItB,cAUzB,yBAAKJ,UAAU,aACX,yBAAKA,UAAU,mBACVuB","file":"static/js/3.bd165f97.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getIconPath } from '../../shared/getIconPath';\r\nimport FavoriteHeart from '../UI/FavoriteHeart/FavoriteHeart';\r\nimport * as actions from '../../store/actions/rootActions';\r\n\r\nconst Favorite = (props) => {\r\n    \r\n    const { WeatherIcon, Temperature, WeatherText } = props.cityData.data[0];\r\n    const { metric } = useSelector(state => state.userSettings);\r\n\r\n    console.log(props.cityData);\r\n    const icon = getIconPath(WeatherIcon);\r\n    const dispatch = useDispatch();\r\n    const onSelectCity = () => dispatch(actions.updateSelectedCity(props.cityName, props.cityKey))\r\n    let temp = Math.round(Temperature.Metric.Value);\r\n\r\n    if (!metric) {\r\n        temp = Temperature.Imperial.Value\r\n    };\r\n    \r\n    const redirectHandler = () => {\r\n        onSelectCity();\r\n        props.history.push('/');\r\n    } ;\r\n\r\n    return (\r\n        <div className='favorites__item' onClick={redirectHandler}>\r\n            <FavoriteHeart \r\n                cityKey={props.cityKey}\r\n                cityName={props.cityName}\r\n                height='4rem'\r\n                width='4rem' />\r\n            <p className='favorites__title'>{props.cityName}</p>\r\n            <div className='favorites__details'>\r\n                <img className='favorites__icon' src={icon} alt={WeatherText} />\r\n                <div className='favorites__container'>\r\n                    <p className='favorites__temp'>{temp}Â°</p>\r\n                    <p className='favorites__text'>{WeatherText}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(Favorite);","import React, { useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Favorite from '../../components/Favorite/Favorite';\r\nimport * as actions from '../../store/actions/rootActions';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\n\r\nconst Favorites = props => {\r\n\r\n    const { fetchFavoritesLoading } = useSelector(state => state.favorites)\r\n    const { favorites, fetchedFavorites } = useSelector(state => state.favorites);\r\n    const favoritesCityKeys = [];\r\n    for (let i = 0; i < favorites.length; i++) {\r\n        favoritesCityKeys.push(favorites[i].cityKey);\r\n    };\r\n    const dispatch = useDispatch();\r\n    const onFetchFavoritesData = useCallback((favoritesCityKeys) => dispatch(actions.fetchFavorites(favoritesCityKeys)),[dispatch]);\r\n    const onClearFetchedFavorites = useCallback(() => dispatch(actions.clearFetchedFavorites()),[dispatch]);\r\n\r\n    useEffect(() => {\r\n        onFetchFavoritesData(favoritesCityKeys);\r\n        console.log('UseEffect Favorites');\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [onFetchFavoritesData]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n            onClearFetchedFavorites();\r\n        };\r\n    }, [onClearFetchedFavorites]);\r\n    \r\n\r\n    let favoriteList = <Spinner />\r\n\r\n    if (!fetchFavoritesLoading) {\r\n        favoriteList= (\r\n            favorites.map(fav => {\r\n                const currentCityData = fetchedFavorites.filter(item => fav.cityKey === item.cityKey)[0]\r\n                return <Favorite\r\n                    key={fav.cityKey}\r\n                    cityData={currentCityData}\r\n                    cityName={fav.cityName}\r\n                    cityKey={fav.cityKey} />\r\n            })\r\n        )\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='favorites'>\r\n            <div className='favorites__list'>\r\n                {favoriteList}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Favorites;\r\n"],"sourceRoot":""}