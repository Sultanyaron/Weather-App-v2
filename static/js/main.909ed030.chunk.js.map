{"version":3,"sources":["utils/axios-weather.js","utils/getIconPath.js","store/actions/actionTypes.js","components/UI/FavoriteHeart/FavoriteHeart.js","components/UI/Spinner/Spinner.js","components/UI/Modal/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","hoc/withErrorHandler/withErrorHandler.js","hooks/http-error-handler/http-error-handler.js","assets/images/sunLoading.png","assets/images/celsius.svg","assets/images/fahrenheit.svg","store/actions/userSettings.js","store/actions/home.js","store/actions/favorites.js","store/actions/rootActions.js","utils/urlCreator.js","store/sagas/home.js","store/sagas/favorites.js","store/sagas/rootSaga.js","utils/updateObject.js","store/reducers/home.js","store/reducers/favorites.js","store/reducers/userSettings.js","components/SearchCity/AutCompleteInput/AutoCompleteInput.js","utils/validEnglishLetters.js","components/SearchCity/SearchResults/SearchResults.js","components/SearchCity/SearchCity.js","components/CurrentCity/CityHeader/CityHeader.js","utils/convertTemp.js","components/CurrentCity/CityForecast/DayForecast/DayForecast.js","utils/getWeekDay.js","components/CurrentCity/CityForecast/CityForecast.js","components/CurrentCity/CurrentCity.js","containers/Home/Home.js","components/Navigation/NavLinks/NavLinks.js","components/Logo/Logo.js","components/UI/TempCheckBox/TempCheckBox.js","components/Navigation/Navigation.js","components/Footer/Footer.js","hoc/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","getIconPath","iconNumber","CHANGE_TEMP","CHANGE_THEME","FETCH_SEARCH","FETCH_SEARCH_SUCCESS","CLEAR_SEARCH_RESULTS","UPDATE_SELECTED_CITY","FETCH_CITY_DATA","FETCH_CITY_DATA_START","FETCH_CITY_DATA_SUCCESS","GET_GEO_LOCATION","FETCH_GEO_LOCATION","FETCH_GEO_LOCATION_SUCCESS","FETCH_GEO_LOCATION_FAIL","SET_FAVORITES","FETCH_FAVORITES","FETCH_FAVORITES_START","FETCH_FAVORITES_SUCCESS","CLEAR_FETCHED_FAVORITES","FavoriteHeart","props","console","log","favorites","useSelector","state","dispatch","useDispatch","colors","heartStyle","backgroundColor","height","width","favoriteCheck","selectedKey","some","element","cityKey","favoriteHandler","cityName","actions","onRemoveFavorite","onAddFavorite","className","style","onClick","Spinner","src","sunSpinner","alt","backdrop","show","clicked","Modal","Fragment","Backdrop","transform","opacity","children","withErrorHandler","WrappedComponent","httpClient","useState","error","setError","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","err","useEffect","eject","useHttpErrorHook","clearError","errorMessage","message","module","exports","changeTemp","type","actionTypes","fetchSearchSuccess","results","searchResults","fetchSearch","value","clearSearchResults","updateSelectedCity","fetchCityData","fetchCityDataStart","fetchCityDataSuccess","currentWeather","forecast","currentWeatherData","forecastData","getGeoLocation","fetchGeoLocation","coords","fetchGeoLocationSuccess","fetchGeoLocationFail","initFavorites","localFavorites","localStorage","getItem","JSON","parse","newFavorites","removeFavorite","filter","fav","setItem","stringify","addFavorite","concat","fetchFavorites","cityKeysList","cityList","fetchFavoritesStart","fetchFavoritesSuccess","citysData","clearFetchedFavorites","apiKey","basePath","autoCompleteEndpoint","q","currentWeatherEndpoint","getoLocationEndpoint","lat","lon","forecastEndpoint","fetchSearchSaga","fetchCityDataSaga","getGeoLocationSaga","fetchGeoLocationSaga","action","urlCreator","searchEndpoint","get","put","data","all","call","currentWeatherRes","forecastRes","getUserLocation","Promise","resolve","navigator","geolocation","getCurrentPosition","location","latitude","longitude","geoEndpoint","EnglishName","Key","fetchFavoritesSaga","fetchSingleFav","map","key","apiCalls","checkErrors","i","length","fetchEndpoint","transformedData","watchHome","watchFavorites","takeLatest","takeEvery","updateObject","oldObject","updatedProperties","initialState","selectedCityKey","selectedCityName","fetchCityDataLoading","forecasts","geoLocationArrived","reducer","fetchedFavorites","fetchFavoritesLoading","metric","darkTheme","AutoCompleteInput","inputVal","setInputVal","home","onSearchCityFetch","useCallback","onClearSearchResults","timer","setTimeout","clearTimeout","placeholder","onChange","event","target","onKeyPress","charCode","validLetter","preventDefault","SearchResults","selectCity","onSelectCity","city","LocalizedName","SearchCity","CityHeader","cCityName","cWeatherIcon","cWeatherTemp","cWeatherText","cCityKey","celToFar","celcius","toFixed","React","memo","dailyForecast","Temperature","Day","Night","date","Date","dayIconPath","Icon","nightIconPath","dayTemp","Math","round","Maximum","Value","nightTemp","Minimum","weekDayNumber","getDay","weekDay","userSettings","forecastsList","Headline","DailyForecasts","Text","dayForecast","EpochDate","CurrentCity","onFetchCityDetails","content","WeatherText","WeatherIcon","currentTemp","Metric","Imperial","NavLinks","to","exact","activeClassName","Logo","TempCheckBox","tempSignPath","fahrenheit","Navigation","Footer","href","Layout","Favorites","lazy","App","onInitFavorites","onGetGeoLocation","routes","path","component","Home","fallback","Boolean","window","hostname","match","composeEnhancers","compose","rootReducer","combineReducers","homeReducer","favoriteReducer","userSettingsReducer","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunk","run","app","basename","process","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.909ed030.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://dataservice.accuweather.com/'\r\n});\r\n\r\nexport default instance;","export const getIconPath = (iconNumber) => {\r\n    return './icons/' + iconNumber + '-s.png';\r\n};","export const CHANGE_TEMP = 'CHANGE_TEMP';\r\nexport const CHANGE_THEME = 'CHANGE_THEME';\r\n\r\nexport const FETCH_SEARCH = 'FETCH_SEARCH';\r\nexport const FETCH_SEARCH_SUCCESS = 'FETCH_SEARCH_SUCCESS'; \r\nexport const CLEAR_SEARCH_RESULTS = 'CLEAR_SEARCH_RESULTS';\r\n\r\nexport const UPDATE_SELECTED_CITY = 'UPDATE_SELECTED_CITY'; \r\n\r\nexport const FETCH_CITY_DATA = 'FETCH_CITY_DATA';\r\nexport const FETCH_CITY_DATA_START = 'FETCH_CITY_DATA_START';\r\nexport const FETCH_CITY_DATA_SUCCESS = 'FETCH_CITY_DATA_SUCCESS';\r\n\r\nexport const GET_GEO_LOCATION = 'GET_GEO_LOCATION';\r\nexport const FETCH_GEO_LOCATION ='FETCH_GEO_LOCATION'; \r\nexport const FETCH_GEO_LOCATION_SUCCESS = 'FETCH_GEO_LOCATION_SUCCESS';\r\nexport const FETCH_GEO_LOCATION_FAIL = 'FETCH_GEO_LOCATION_FAIL';\r\n\r\n\r\n\r\n\r\nexport const SET_FAVORITES = 'SET_FAVORITES';\r\nexport const REMOVE_FAVORITE = 'REMOVE_FAVORITE';\r\nexport const ADD_FAVORITE = 'REMOVE_FAVORITE';\r\n\r\nexport const FETCH_FAVORITES = 'FETCH_FAVORITES';\r\nexport const FETCH_FAVORITES_START = 'FETCH_FAVORITES_START';\r\nexport const FETCH_FAVORITES_SUCCESS = 'FETCH_FAVORITES_SUCCESS';\r\nexport const CLEAR_FETCHED_FAVORITES = 'CLEAR_FETCHED_FAVORITES';\r\n\r\n\r\n\r\n\r\n \r\n","import React from 'react'; \r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\n\r\nconst FavoriteHeart = (props) => {\r\n    console.log(props);\r\n    \r\n    \r\n    const { favorites } = useSelector(state => state.favorites);\r\n    const dispatch = useDispatch();\r\n    const onRemoveFavorite = (cityKey, favorites) => dispatch(actions.removeFavorite(cityKey, favorites));\r\n    const onAddFavorite = (cityKey, cityName, favorites) => dispatch(actions.addFavorite(cityKey, cityName, favorites));\r\n    const colors = {\r\n        selected: '#e31b23',\r\n        notSelected: '#777'\r\n    };\r\n\r\n    const heartStyle = {\r\n        backgroundColor: colors.notSelected,\r\n        height: props.height,\r\n        width: props.width\r\n    };\r\n\r\n\r\n    const favoriteCheck = (selectedKey, favorites) => {\r\n        return favorites.some(element => element.cityKey === selectedKey);\r\n    };\r\n\r\n    if (favoriteCheck(props.cityKey, favorites)) {\r\n        heartStyle.backgroundColor = colors.selected\r\n    };\r\n\r\n    const favoriteHandler = (cityKey, cityName) => {\r\n        if (favoriteCheck(cityKey, favorites)) {\r\n            onRemoveFavorite(cityKey, favorites);\r\n        } else {\r\n            onAddFavorite(cityKey, cityName, favorites);\r\n        };\r\n    };\r\n\r\n    return (\r\n            <div \r\n                className=\"favoriteHeart\"\r\n                style={heartStyle}\r\n                onClick={() => favoriteHandler(props.cityKey, props.cityName)}>\r\n            </div>\r\n    );\r\n};  \r\n\r\nexport default FavoriteHeart","import React from 'react';\r\nimport sunSpinner from '../../../assets/images/sunLoading.png';\r\n\r\nconst Spinner = (props) => {\r\n\r\n    return <img className='spinner' src={sunSpinner} alt='Loading...'></img>\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\n\r\nexport const backdrop = (props) => (\r\n    props.show ? <div className='backdrop' onClick={props.clicked}></div> : null\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\nimport Backdrop from './Backdrop/Backdrop';\r\n\r\nconst Modal = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <Backdrop \r\n                show={props.show}\r\n                clicked={props.clicked}/>\r\n            <div \r\n                className='modal'\r\n                style={{\r\n                    transform: props.show ? 'translate(-50% , 0) ' : 'translate(-50% , -100vh)',\r\n                    opacity: props.show ? '1' : '0'\r\n                }}>\r\n                {props.children}\r\n            \r\n\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport useHttpErrorHook from '../../hooks/http-error-handler/http-error-handler'\r\n\r\nconst withErrorHandler = (WrappedComponent, axios) => {\r\n    return (props) => {\r\n        const [error, clearError] = useHttpErrorHook(axios); \r\n\r\n        let errorMessage = null;\r\n        if (error) {\r\n            errorMessage = (\r\n                <div className='errorHandler'>\r\n                    <p className='errorHandler__title'>Error occurred</p>\r\n                    <p className='errorHandler__message'>{error.message}, please try again in few minutes</p>\r\n                </div>\r\n            );\r\n        };\r\n        return (\r\n            <React.Fragment>\r\n                <Modal \r\n                    show={error}\r\n                    clicked={clearError}>\r\n                    {errorMessage}\r\n                </Modal>\r\n                <WrappedComponent error={error} {...props}/>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n};\r\n\r\nexport default withErrorHandler;","import { useState, useEffect } from 'react';\r\n\r\n\r\nexport default httpClient => {\r\n    const [error, setError] = useState(null);\r\n\r\n    const reqInterceptor = httpClient.interceptors.request.use(req => {\r\n        setError(null);\r\n        return req;\r\n    });\r\n    const resInterceptor = httpClient.interceptors.response.use(res => res, err => {\r\n        setError(err);\r\n    });\r\n  \r\n\r\n    //clear intercaptors when unMount\r\n    useEffect(() => {\r\n        return () => {\r\n        httpClient.interceptors.request.eject(reqInterceptor);\r\n        httpClient.interceptors.response.eject(resInterceptor);\r\n        }\r\n\r\n    }, [httpClient.interceptors.request, httpClient.interceptors.response, reqInterceptor, resInterceptor]);\r\n\r\n    const errorConfirmedHandler = () => {\r\n        setError(null);\r\n    };\r\n\r\n    return [error, errorConfirmedHandler]\r\n};","module.exports = __webpack_public_path__ + \"static/media/sunLoading.3d7f5242.png\";","module.exports = __webpack_public_path__ + \"static/media/celsius.802510af.svg\";","module.exports = __webpack_public_path__ + \"static/media/fahrenheit.0a3403d1.svg\";","import * as actionTypes from './actionTypes';\r\n\r\nexport const changeTemp = () => {\r\n    return {\r\n        type: actionTypes.CHANGE_TEMP\r\n    };\r\n};\r\n\r\nexport const changeTheme = () => {\r\n    return {\r\n        type: actionTypes.CHANGE_THEME\r\n    };\r\n};","import * as actionTypes from './actionTypes';\r\n\r\n//Fatch autocomplete search\r\n    \r\nexport const fetchSearchSuccess = (results) => {\r\n    return {\r\n        type: actionTypes.FETCH_SEARCH_SUCCESS,\r\n        searchResults: results\r\n    };\r\n};\r\n\r\nexport const fetchSearch = (cityKey) => {\r\n    return {\r\n        type: actionTypes.FETCH_SEARCH,\r\n        value: cityKey\r\n    };\r\n};\r\n\r\nexport const clearSearchResults = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_SEARCH_RESULTS\r\n    };\r\n};\r\n\r\nexport const updateSelectedCity = (cityName, cityKey) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SELECTED_CITY,\r\n        cityName: cityName,\r\n        cityKey: cityKey\r\n    };\r\n};\r\n\r\n//Fetch current weather \r\n\r\nexport const fetchCityData = ( cityKey ) => {\r\n    return {\r\n        type: actionTypes.FETCH_CITY_DATA,\r\n        cityKey: cityKey\r\n    };\r\n};\r\n\r\nexport const fetchCityDataStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_CITY_DATA_START\r\n    };\r\n};\r\n\r\nexport const fetchCityDataSuccess = (currentWeather, forecast) => {\r\n    return {\r\n        type: actionTypes.FETCH_CITY_DATA_SUCCESS,\r\n        currentWeatherData: currentWeather,\r\n        forecastData: forecast\r\n    };\r\n};\r\n\r\n\r\n//Geo location \r\n\r\nexport const getGeoLocation = () => {\r\n    return {\r\n        type: actionTypes.GET_GEO_LOCATION\r\n    };\r\n};\r\n\r\nexport const fetchGeoLocation = (coords) => {\r\n    return {\r\n        type: actionTypes.FETCH_GEO_LOCATION,\r\n        coords: coords\r\n    };\r\n};  \r\n\r\nexport const fetchGeoLocationSuccess = (cityName, cityKey) => {\r\n    return {\r\n        type: actionTypes.FETCH_GEO_LOCATION_SUCCESS,\r\n        cityName: cityName,\r\n        cityKey: cityKey\r\n    };\r\n};  \r\n\r\nexport const fetchGeoLocationFail = () => {\r\n    return {\r\n        type: actionTypes.FETCH_GEO_LOCATION_FAIL\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as actionTypes from './actionTypes';\r\n\r\n\r\n//Sync actions (ADD/REMOVE/INIT)\r\nexport const initFavorites = () => {\r\n    let favorites = [];\r\n    const localFavorites = localStorage.getItem('userFav');\r\n    if (localFavorites !== null) {\r\n        favorites = JSON.parse(localFavorites);\r\n    };\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        newFavorites: favorites\r\n    };\r\n};\r\n\r\nexport const removeFavorite = (cityKey, favorites) => {\r\n    let newFavorites = favorites.filter(fav => cityKey !== fav.cityKey);\r\n    localStorage.setItem('userFav', JSON.stringify(newFavorites));\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        newFavorites: newFavorites\r\n    };\r\n};\r\n\r\nexport const addFavorite = (cityKey, cityName, favorites) => {\r\n    let newFavorites = favorites.concat({cityKey: cityKey, cityName: cityName});\r\n    localStorage.setItem('userFav', JSON.stringify(newFavorites));\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        newFavorites: newFavorites\r\n    };\r\n};\r\n\r\n//Async fetch all \r\nexport const fetchFavorites = (cityKeysList) => {\r\n    return {\r\n        type: actionTypes.FETCH_FAVORITES,\r\n        cityList: cityKeysList\r\n    };\r\n};\r\n\r\nexport const fetchFavoritesStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_FAVORITES_START\r\n    };\r\n};\r\n\r\nexport const fetchFavoritesSuccess = (results) => {\r\n    return {\r\n        type: actionTypes.FETCH_FAVORITES_SUCCESS,\r\n        citysData: results\r\n    };\r\n};\r\n\r\n\r\nexport const clearFetchedFavorites = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_FETCHED_FAVORITES\r\n    };\r\n};","export { changeTemp, changeTheme } from './userSettings';\r\nexport {\r\n    fetchSearch, \r\n    fetchSearchSuccess, \r\n    clearSearchResults, \r\n    updateSelectedCity,\r\n    fetchCityData,\r\n    fetchCityDataStart,\r\n    fetchCityDataSuccess,\r\n    getGeoLocation,\r\n    fetchGeoLocation,\r\n    fetchGeoLocationSuccess,\r\n    fetchGeoLocationFail\r\n} from './home';\r\n\r\nexport {\r\n    initFavorites,\r\n    removeFavorite,\r\n    addFavorite,\r\n    fetchFavorites,\r\n    fetchFavoritesStart,\r\n    fetchFavoritesSuccess,\r\n    clearFetchedFavorites\r\n} from './favorites';","\r\nconst apiKey = 'u9RaORaXroYFdUkpSTgfjH3Rs8ETJ2bn';\r\nconst basePath = 'https://dataservice.accuweather.com/';\r\n\r\nexport const autoCompleteEndpoint = (q) => {\r\n    return basePath + 'locations/v1/cities/autocomplete?apikey=' + apiKey + '&q=' + q;\r\n};\r\n\r\nexport const currentWeatherEndpoint = (cityKey) => {\r\n    return basePath + 'currentconditions/v1/' + cityKey + '?apikey=' + apiKey;\r\n};\r\n\r\nexport const getoLocationEndpoint = (lat, lon) => {\r\n    return basePath + 'locations/v1/cities/geoposition/search?apikey=' + apiKey + '&q=' + lat + '%2C' + lon;\r\n};  \r\n\r\nexport const forecastEndpoint = (cityKey) => {\r\n    return basePath + 'forecasts/v1/daily/5day/' + cityKey + '?apikey=' + apiKey + '&metric=true';\r\n};","import { put, call, all } from 'redux-saga/effects';\r\nimport * as actions from '../actions/rootActions';\r\nimport axios from '../../utils/axios-weather';\r\nimport * as urlCreator from '../../utils/urlCreator';\r\n\r\nexport function* fetchSearchSaga(action) {\r\n    const searchEndpoint =  yield urlCreator.autoCompleteEndpoint(action.value);\r\n    try{\r\n        const response = yield axios.get(searchEndpoint);\r\n        yield put(actions.fetchSearchSuccess(response.data));\r\n    } catch (error) {\r\n        console.error(error);\r\n    };        \r\n};\r\n\r\nexport function* fetchCityDataSaga(action) {\r\n    const currentWeatherEndpoint = yield urlCreator.currentWeatherEndpoint(action.cityKey);\r\n    const forecastEndpoint = yield urlCreator.forecastEndpoint(action.cityKey);\r\n\r\n    yield put(actions.fetchCityDataStart());\r\n    try {\r\n        const [currentWeatherRes, forecastRes ] = yield all([\r\n            call(axios.get, currentWeatherEndpoint),\r\n            call(axios.get, forecastEndpoint)\r\n        ]);\r\n        yield put(actions.fetchCityDataSuccess(currentWeatherRes.data, forecastRes.data));\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nconst getUserLocation = () => new Promise((resolve) => {\r\n    navigator.geolocation.getCurrentPosition(\r\n        location => resolve(location),\r\n        error => resolve(error),\r\n    );\r\n});\r\n\r\nexport function* getGeoLocationSaga(action) {\r\n    const location  = yield call(getUserLocation);\r\n    if ( location.coords ) {\r\n        yield put(actions.fetchGeoLocation(location.coords));\r\n    } else {\r\n        yield put(actions.updateSelectedCity('Tel-Aviv', '215854'));\r\n        yield put(actions.fetchGeoLocationFail());\r\n    };\r\n};\r\n\r\nexport function* fetchGeoLocationSaga (action) {\r\n    const { latitude, longitude } = action.coords;\r\n    const geoEndpoint = yield urlCreator.getoLocationEndpoint(latitude, longitude);\r\n    try {\r\n        const response = yield axios.get(geoEndpoint); \r\n        const { EnglishName, Key } = response.data;\r\n        yield put(actions.fetchGeoLocationSuccess(EnglishName, Key));\r\n    } catch (error) {\r\n        yield put(actions.updateSelectedCity('Tel-Aviv', '215854'));\r\n        yield put(actions.fetchGeoLocationFail());\r\n    };\r\n};\r\n\r\n\r\n","import { put, all } from 'redux-saga/effects';\r\nimport axios from '../../utils/axios-weather';\r\nimport { currentWeatherEndpoint } from '../../utils/urlCreator';\r\nimport * as actions from '../actions/rootActions';\r\n\r\n\r\nexport function* fetchFavoritesSaga(action) {\r\n    yield put(actions.fetchFavoritesStart());\r\n    let results = [];\r\n    const apiCalls = yield action.cityList.map(key => fetchSingleFav(key));\r\n    results = yield all(apiCalls);\r\n    let checkErrors = false;\r\n    for (let i = 0; i < results.length; i++) {\r\n        if (typeof results[i] === \"undefined\" ) {\r\n            checkErrors = true;\r\n        }\r\n    };\r\n    if (!checkErrors) {\r\n        yield put(actions.fetchFavoritesSuccess(results));\r\n    }\r\n};\r\n\r\nfunction* fetchSingleFav(cityKey) {\r\n    const fetchEndpoint = currentWeatherEndpoint(cityKey);\r\n    try {\r\n        const response = yield axios.get(fetchEndpoint);\r\n        const transformedData = {cityKey: cityKey, data: response.data};\r\n        return transformedData;\r\n    } catch (error) {\r\n        console.error('Error fetching Favorite: ' + cityKey);\r\n    };\r\n};\r\n\r\n","import { all, takeLatest, takeEvery } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport { \r\n    fetchSearchSaga, \r\n    fetchCityDataSaga, \r\n    getGeoLocationSaga, \r\n    fetchGeoLocationSaga \r\n} from './home';\r\nimport { fetchFavoritesSaga } from './favorites'\r\n\r\n\r\nexport function* watchHome() {\r\n    yield all ([\r\n        takeLatest(actionTypes.FETCH_SEARCH, fetchSearchSaga),\r\n        takeLatest(actionTypes.FETCH_CITY_DATA, fetchCityDataSaga),\r\n        takeEvery(actionTypes.GET_GEO_LOCATION, getGeoLocationSaga),\r\n        takeEvery(actionTypes.FETCH_GEO_LOCATION, fetchGeoLocationSaga)\r\n    ]);\r\n};\r\n\r\nexport function* watchFavorites() {\r\n    yield all ([\r\n        takeLatest(actionTypes.FETCH_FAVORITES, fetchFavoritesSaga)\r\n    ]);\r\n};\r\n\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    };\r\n};","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../utils/updateObject';\r\n\r\nconst initialState = {\r\n    selectedCityKey: null,\r\n    selectedCityName: null,\r\n    searchResults: [],\r\n    fetchCityDataLoading: true,\r\n    currentWeather: null,\r\n    forecasts: null,\r\n    geoLocationArrived: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_SEARCH_SUCCESS:\r\n            return updateObject(state, {searchResults: action.searchResults});\r\n        case actionTypes.CLEAR_SEARCH_RESULTS:\r\n            return updateObject(state, {searchResults: []});\r\n        case actionTypes.UPDATE_SELECTED_CITY:\r\n            return updateObject(state, {\r\n                selectedCityKey: action.cityKey, \r\n                selectedCityName: action.cityName\r\n            });\r\n        case actionTypes.FETCH_CITY_DATA_START:\r\n            return updateObject(state, {fetchCityDataLoading: true});\r\n        case actionTypes.FETCH_CITY_DATA_SUCCESS:\r\n            return updateObject(state, {\r\n                currentWeather: action.currentWeatherData,\r\n                forecasts: action.forecastData,\r\n                fetchCityDataLoading: false\r\n            });\r\n        case actionTypes.FETCH_GEO_LOCATION_SUCCESS:\r\n            return updateObject(state, {\r\n                selectedCityKey: action.cityKey,\r\n                selectedCityName: action.cityName,\r\n                geoLocationArrived: true\r\n            });\r\n        case actionTypes.FETCH_GEO_LOCATION_FAIL:\r\n            return updateObject(state, {geoLocationArrived: true});\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../utils/updateObject';\r\n\r\nconst initialState = {\r\n    favorites: [],\r\n    fetchedFavorites: [],\r\n    fetchFavoritesLoading: true\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_FAVORITES: \r\n            return updateObject(state, {favorites: action.newFavorites});\r\n        case actionTypes.FETCH_FAVORITES_START:\r\n            return updateObject(state, {fetchFavoritesLoading: true});\r\n        case actionTypes.FETCH_FAVORITES_SUCCESS:\r\n            return updateObject(state, {\r\n                fetchedFavorites: action.citysData,\r\n                fetchFavoritesLoading: false });\r\n        case actionTypes.CLEAR_FETCHED_FAVORITES:\r\n            return updateObject(state, {\r\n                fetchedFavorites: [],\r\n                fetchFavoritesLoading: true });\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../utils/updateObject';\r\n\r\nconst initialState = {\r\n    metric: true,\r\n    darkTheme: false//Not in use atm -  Ready to be implemented\r\n};\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_TEMP:\r\n            return updateObject(state, {metric: !state.metric});\r\n        case actionTypes.CHANGE_THEME:\r\n            return updateObject(state, {darkTheme: !state.darkTheme});\r\n        default: return state\r\n    };\r\n};\r\n\r\nexport default reducer;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { validLetter } from '../../../utils/validEnglishLetters';\r\nimport * as actions from '../../../store/actions/rootActions';\r\n    \r\nconst AutoCompleteInput = (props) => {\r\n    const [ inputVal, setInputVal ] = useState('');\r\n    const { selectedCityKey } = useSelector(state => state.home);\r\n    const dispatch = useDispatch();\r\n    const onSearchCityFetch = useCallback((cityKey) => dispatch(actions.fetchSearch(cityKey)), [dispatch]);\r\n    const onClearSearchResults = useCallback(() => dispatch(actions.clearSearchResults()), [dispatch])\r\n    \r\n    useEffect(() => {\r\n        if ( inputVal !== ' ' && inputVal.length !== 0 ) {\r\n            const timer = setTimeout(() => {\r\n                onSearchCityFetch(inputVal);\r\n            }, 300);\r\n            return () => {\r\n                clearTimeout(timer);\r\n            };\r\n        };\r\n    },[inputVal, onSearchCityFetch]);\r\n\r\n    //for resetting the input when new city selected\r\n    useEffect(() => {\r\n        setInputVal('');\r\n    }, [selectedCityKey])\r\n\r\n    const inputChangedHandler = (event) => {\r\n        setInputVal(event.target.value);\r\n        if ( event.target.value.length === 0 ) {\r\n            onClearSearchResults();\r\n        };\r\n    };\r\n\r\n    const validKeyHandler = (event) => {\r\n        if (!validLetter(event)){\r\n            event.preventDefault()\r\n        };\r\n    };\r\n\r\n    return (\r\n        <input\r\n            className='searchCity__input'\r\n            placeholder='Search city'\r\n            type='text'\r\n            onChange={inputChangedHandler}\r\n            onKeyPress={validKeyHandler}\r\n            value={inputVal} />\r\n    ) ;\r\n};\r\n\r\nexport default AutoCompleteInput;","export const validLetter = ( event ) => {\r\n    const { charCode } = event ;\r\n    if(charCode >= 60 && charCode <= 90){\r\n        return true;\r\n    };\r\n    if(charCode >= 97 && charCode <= 122){\r\n        return true;\r\n    };\r\n    if(charCode === 32){\r\n        return true\r\n    };\r\n    return false;\r\n};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\nconst SearchResults = () => {\r\n\r\n    const { selectedCityKey } = useSelector( state => state.home);\r\n    const { searchResults } = useSelector(state => state.home);\r\n    const dispatch = useDispatch();\r\n    const onSelectCity = (cityName, cityKey) => dispatch(actions.updateSelectedCity(cityName, cityKey))\r\n    const onClearSearchResults = () => dispatch(actions.clearSearchResults());\r\n    \r\n    const selectCity = (cityName, cityKey) => {\r\n        if (cityName !== selectedCityKey ) {\r\n            onSelectCity(cityName, cityKey);\r\n            onClearSearchResults();\r\n        };       \r\n    };\r\n    \r\n\r\n    \r\n    const results = searchResults.map(city => {\r\n        const { LocalizedName, Key } = city;\r\n        return (\r\n            <li\r\n                className='searchCity__item'\r\n                onClick={() => selectCity(LocalizedName, Key)}\r\n                key={Key} \r\n                >\r\n                {LocalizedName}\r\n            </li>             \r\n        );\r\n    })\r\n    \r\n    return (\r\n        <ul className='searchCity__results'>\r\n            {results}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default SearchResults;","import React from 'react';\r\n\r\n\r\nimport AutoCompleteInput from './AutCompleteInput/AutoCompleteInput';\r\nimport SearchResults from './SearchResults/SearchResults';\r\n\r\nconst SearchCity = (props) => {\r\n\r\n    return (\r\n        <div className='searchCity'>\r\n            <div className=\"searchCity-wrapper\">\r\n                <AutoCompleteInput />\r\n                <SearchResults />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchCity;","import React from 'react';\r\nimport FavoriteHeart from '../../UI/FavoriteHeart/FavoriteHeart';\r\nimport { getIconPath } from '../../../utils/getIconPath';\r\n\r\nconst CityHeader = (props) => {\r\n\r\n    return (\r\n        <header className='cityHeader'>\r\n            <div className='cityHeader__details'>\r\n                <p className='cityHeader__details-title'>{props.cCityName}</p>\r\n                <div className=\"cityHeader__details-container\">\r\n                    <img className='cityHeader__icon' src={getIconPath(props.cWeatherIcon)} alt={'dsd'} />\r\n                    <div className=\"cityHeader__details-subContainer\">\r\n                        <p className='cityHeader__details-temp'>{props.cWeatherTemp}°</p>\r\n                        <div className='cityHeader__details-text'><em>{props.cWeatherText}</em></div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            \r\n            <FavoriteHeart \r\n                cityKey={props.cCityKey}\r\n                cityName={props.cCityName}\r\n                height='7rem'\r\n                width='7rem' />\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default CityHeader;","export const celToFar = (celcius) => {\r\n   \r\n    return ((celcius * 1.8) + 32).toFixed(0);\r\n};  ","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getIconPath } from '../../../../utils/getIconPath';\r\nimport { getWeekDay } from '../../../../utils/getWeekDay';\r\nimport { celToFar } from '../../../../utils/convertTemp'\r\n\r\n\r\nconst DayForecast = (props) => {\r\n    \r\n    const { Temperature, Day, Night  } = props.dailyForecast;\r\n    const date = props.dailyForecast.Date;\r\n    const dayIconPath = getIconPath(Day.Icon);\r\n    const nightIconPath = getIconPath(Night.Icon);\r\n    let dayTemp = Math.round(Temperature.Maximum.Value);\r\n    let nightTemp = Math.round(Temperature.Minimum.Value);\r\n    const weekDayNumber = new Date(date).getDay();\r\n    const weekDay = getWeekDay(weekDayNumber);\r\n    const { metric } = useSelector(state => state.userSettings);\r\n\r\n    if (!metric) {\r\n        dayTemp = celToFar(dayTemp);\r\n        nightTemp = celToFar(nightTemp);\r\n    }\r\n\r\n    return (\r\n        <div className='cityForecast__day'>\r\n            <p className='cityForecast__day-title'>{weekDay}</p>\r\n            <div className='cityForecast__day-container'>\r\n                <div className='cityForecast__details'>\r\n                    <p className='cityForecast__details-title'>Day:</p>\r\n                    <p className='cityForecast__details-temp'>{dayTemp}°</p>\r\n                    <img className='cityForecast__icon' src={dayIconPath} alt={'dsd'} />\r\n                </div>\r\n                <div className='cityForecast__details'>\r\n                    <p className='cityForecast__details-title'>Night:</p>\r\n                    <p className='cityForecast__details-temp'>{nightTemp}°</p>\r\n                    <img className='cityForecast__details-icon' src={nightIconPath} alt={'dsd'} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(DayForecast);","export const getWeekDay = (weekDayNum) => {\r\n    const weekDayList = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    return weekDayList[weekDayNum];\r\n};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport DayForecast from './DayForecast/DayForecast';\r\n\r\n\r\nconst CityForecast = () => {\r\n    console.log('CityForecast RENDER');\r\n    const { forecasts } = useSelector(state => state.home);\r\n  \r\n    \r\n    let forecastsList = null;\r\n    if (forecasts) {\r\n    \r\n        const { Headline, DailyForecasts} = forecasts;\r\n        forecastsList = (\r\n            <React.Fragment>\r\n                <h1 className='cityForecast__title'><em>{Headline.Text}</em></h1>\r\n                <div className='cityForecast__forecasts'>\r\n                    {DailyForecasts.map(dayForecast => {\r\n                        return <DayForecast \r\n                            key={dayForecast.EpochDate}\r\n                            dailyForecast={dayForecast}/>\r\n                    })}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className='cityForecast'>\r\n            {forecastsList}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(CityForecast);","import React, { useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CityHeader from './CityHeader/CityHeader';\r\nimport CityForecast from './CityForecast/CityForecast';\r\nimport * as actions from '../../store/actions/rootActions';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\nconst CurrentCity = () => {\r\n    console.log('currentCity RENDER');\r\n    const { selectedCityKey, selectedCityName, fetchCityDataLoading  } = useSelector(state => state.home); \r\n    const currentWeather = useSelector(state => state.home.currentWeather);\r\n    const { metric } = useSelector(state => state.userSettings);\r\n    const dispatch = useDispatch();\r\n    const onFetchCityDetails = useCallback((cityKey) => dispatch(actions.fetchCityData(cityKey)), [dispatch]);\r\n    \r\n    useEffect(() => {\r\n        if (selectedCityKey) {\r\n            onFetchCityDetails(selectedCityKey)\r\n        };\r\n    }, [onFetchCityDetails, selectedCityKey]);\r\n\r\n    let content = <Spinner />;\r\n\r\n    if (!fetchCityDataLoading) {\r\n        var { WeatherText, WeatherIcon, Temperature } = currentWeather[0];\r\n        var currentTemp = Temperature.Metric.Value;\r\n        if (!metric) {\r\n            currentTemp = Temperature.Imperial.Value;\r\n        };\r\n\r\n        content = (\r\n            <React.Fragment>\r\n                <CityHeader \r\n                    cWeatherText={WeatherText}\r\n                    cWeatherIcon={WeatherIcon}\r\n                    cWeatherTemp={currentTemp}\r\n                    cCityName={selectedCityName}\r\n                    cCityKey={selectedCityKey} />\r\n                <CityForecast />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='currentCity'>\r\n            <div className='currentCity__box'>\r\n                {content}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentCity;","import React from 'react'; \r\nimport SearchCity from '../../components/SearchCity/SearchCity';\r\nimport CurrentCity from '../../components/CurrentCity/CurrentCity';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport axios from '../../utils/axios-weather';\r\n\r\nconst Home = props => {\r\n    console.log('home Render');\r\n    \r\n    return (\r\n    <div className='home'>\r\n        <SearchCity />\r\n        <CurrentCity />\r\n    </div>\r\n    );\r\n};\r\n\r\n\r\nexport default withErrorHandler(Home, axios);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst NavLinks = () => {\r\n    return (\r\n        <ul className=\"navigation__links\">\r\n            <li className='navigation__item'>\r\n                <NavLink\r\n                    to=\"/\"\r\n                    exact\r\n                    className='navigation__link'\r\n                    activeClassName=\"navigation__item--active\"\r\n                    >Home\r\n                </NavLink>\r\n            </li>\r\n\r\n            <li className='navigation__item'>\r\n                <NavLink\r\n                    to=\"/favorites\"\r\n                    className='navigation__link'\r\n                    activeClassName=\"navigation__item--active\"\r\n                    >Favorites\r\n                </NavLink>\r\n            </li>\r\n            \r\n            \r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default NavLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Logo = () => {\r\n\r\n    return (\r\n        <Link className='navigation__logo' to=\"/\">\r\n            <h1>Herolo Weather</h1>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\nimport celcius from '../../../assets/images/celsius.svg';\r\nimport fahrenheit  from '../../../assets/images/fahrenheit.svg'\r\nimport { useDispatch, useSelector } from 'react-redux'; \r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\nconst TempCheckBox = props => {\r\n    const dispatch = useDispatch();\r\n    const metric = useSelector((state) => state.userSettings.metric);\r\n    const onChangeTemp = () => dispatch(actions.changeTemp());\r\n    const changeTempHandler = () => {\r\n        onChangeTemp();\r\n    };\r\n\r\n    let tempSignPath =  celcius;\r\n\r\n    if ( !metric ) {\r\n        tempSignPath = fahrenheit;\r\n    };\r\n\r\n    return (\r\n        <div className=\"tempCheckBox\" onClick={changeTempHandler}>\r\n            <p className='tempCheckBox__title'>Temperature</p>\r\n            <img className='tempCheckBox__img' src={tempSignPath} alt='Temp Selector'></img>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TempCheckBox;","import React from 'react';\r\n\r\n\r\nimport NavLinks from './NavLinks/NavLinks'\r\nimport Logo from '../Logo/Logo';\r\nimport TempCheckBox from '../UI/TempCheckBox/TempCheckBox'\r\n\r\nconst Navigation = props => {\r\n    return (\r\n        <div className=\"navigation\">\r\n            <React.Fragment> \r\n                <Logo />\r\n                <NavLinks />\r\n                <div className=\"navigation__settings\">\r\n                    <TempCheckBox />\r\n                    {/* <ThemeSelector /> */}\r\n                </div>\r\n            </React.Fragment>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\n\r\nconst Footer = () => {\r\n    console.log('Footer RENDER');\r\n    return (\r\n        <div className='footer'>\r\n            <p className='footer__title'>Developed by Yaron Sultan - 2019</p>\r\n            <div className='footer__media'>\r\n                <a className='footer__icon footer__icon--linkedin' href='https://www.linkedin.com/in/yaron-sultan-b52bb9164/'>&nbsp;</a>\r\n                <a className='footer__icon footer__icon--github' href='https://github.com/Sultanyaron'>&nbsp;</a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Navigation from '../../components/Navigation/Navigation';\r\nimport Footer from '../../components/Footer/Footer';\r\n\r\nconst Layout = props => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Navigation />\r\n            { props.children }\r\n            <Footer />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Layout;","import React, { Suspense, useEffect, useCallback } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport * as actions from './store/actions/rootActions';\r\n\r\nimport Home from './containers/Home/Home';\r\nimport Layout from './hoc/Layout/Layout';\r\n\r\nconst Favorites = React.lazy(() => {\r\n    return import('./containers/Favorites/Favorites');\r\n});\r\n\r\n\r\nconst App = props => {\r\n    const dispatch = useDispatch();\r\n    const onInitFavorites = useCallback(() => dispatch(actions.initFavorites()), [dispatch]);\r\n    const onGetGeoLocation = useCallback(() => dispatch(actions.getGeoLocation()), [dispatch]);\r\n\r\n    useEffect(() => {\r\n        onInitFavorites();\r\n    }, [onInitFavorites] );\r\n\r\n    useEffect(() => {\r\n        onGetGeoLocation();\r\n    }, [onGetGeoLocation]);\r\n\r\n    let routes = (\r\n        <Switch>\r\n            <Route path={\"/favorites\"} component={Favorites}  />\r\n            <Route path={\"/\"} component={Home} />\r\n            <Redirect to={\"/\"} />\r\n        </Switch>\r\n    ); \r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Layout>\r\n                <Suspense fallback={<p>Loading...</p>}> <main className='mainContainer'>{ routes }</main>  </Suspense>\r\n            </Layout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { compose, combineReducers, createStore, applyMiddleware } from 'redux';\nimport { watchHome, watchFavorites } from './store/sagas/rootSaga';\nimport { BrowserRouter } from 'react-router-dom';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\nimport homeReducer from './store/reducers/home';\nimport favoriteReducer from './store/reducers/favorites';\nimport userSettingsReducer from './store/reducers/userSettings';\n\nimport './assets/sass/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers({\n    home: homeReducer,\n    favorites : favoriteReducer,\n    userSettings: userSettingsReducer\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk, sagaMiddleware)\n));\n\nsagaMiddleware.run(watchHome);\nsagaMiddleware.run(watchFavorites);\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}