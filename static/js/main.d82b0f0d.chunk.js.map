{"version":3,"sources":["shared/axios-weather.js","store/actions/actionTypes.js","shared/getIconPath.js","components/UI/Spinner/Spinner.js","components/UI/Modal/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","hoc/withErrorHandler/withErrorHandler.js","hooks/http-error-handler/http-error-handler.js","shared/favoriteCheck.js","components/UI/FavoriteHeart/FavoriteHeart.js","assets/images/sunLoading.png","assets/images/celsius.svg","assets/images/fahrenheit.svg","store/actions/userSettings.js","store/actions/home.js","store/actions/favorites.js","store/actions/rootActions.js","shared/urlCreator.js","store/sagas/home.js","store/sagas/favorites.js","store/sagas/rootSaga.js","store/reducers/home.js","store/reducers/favorites.js","store/reducers/userSettings.js","components/SearchCity/AutCompleteInput/AutoCompleteInput.js","shared/validEnglishLetters.js","components/SearchCity/SearchResults/SearchResults.js","components/SearchCity/SearchCity.js","components/CurrentCity/CityHeader/CityHeader.js","shared/convertTemp.js","components/CurrentCity/CityForecast/DayForecast/DayForecast.js","shared/getWeekDay.js","components/CurrentCity/CityForecast/CityForecast.js","components/CurrentCity/CurrentCity.js","containers/Home/Home.js","components/Navigation/NavLinks/NavLinks.js","components/Logo/Logo.js","components/UI/TempCheckBox/TempCheckBox.js","components/Navigation/Navigation.js","components/Footer/Footer.js","components/UI/CoverImg/CoverImg.js","hoc/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","CHANGE_TEMP","CHANGE_THEME","FETCH_SEARCH","FETCH_SEARCH_SUCCESS","CLEAR_SEARCH_RESULTS","UPDATE_SELECTED_CITY","FETCH_CURRENT_WEATHER","FETCH_CURRENT_WEATHER_START","FETCH_CURRENT_WEATHER_SUCCESS","GET_GEO_LOCATION","FETCH_GEO_LOCATION","FETCH_GEO_LOCATION_SUCCESS","FETCH_GEO_LOCATION_FAIL","FETCH_FORECAST","FETCH_FORECAST_START","FETCH_FORECAST_SUCCESS","SET_FAVORITES","FETCH_FAVORITES","FETCH_FAVORITES_START","FETCH_FAVORITES_SUCCESS","CLEAR_FETCHED_FAVORITES","getIconPath","iconNumber","Spinner","props","className","src","sunSpinner","alt","backdrop","show","onClick","clicked","Modal","Fragment","Backdrop","style","transform","opacity","children","withErrorHandler","WrappedComponent","httpClient","useState","error","setError","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","err","useEffect","eject","useHttpErrorHook","clearError","errorMessage","message","favoriteCheck","selectedKey","favorites","some","element","cityKey","FavoriteHeart","useSelector","state","dispatch","useDispatch","colors","heartStyle","backgroundColor","height","width","favoriteHandler","cityName","actions","onRemoveFavorite","onAddFavorite","module","exports","changeTemp","type","actionTypes","fetchSearchSuccess","results","searchResults","fetchSearch","value","clearSearchResults","updateSelectedCity","fetchCurrentWeather","fetchCurrentWeatherStart","fetchCurrentWeatherSuccess","data","getGeoLocation","fetchGeoLocation","coords","fetchGeoLocationSuccess","fetchGeoLocationFail","fetchForecast","fetchForecastSuccess","fetchForecastStart","initFavorites","localFavorites","localStorage","getItem","JSON","parse","newFavorites","removeFavorite","filter","fav","setItem","stringify","addFavorite","concat","fetchFavorites","cityKeysList","cityList","fetchFavoritesStart","fetchFavoritesSuccess","citysData","clearFetchedFavorites","apiKey","basePath","autoCompleteEndpoint","q","currentWeatherEndpoint","getoLocationEndpoint","lat","lon","forecastEndpoint","fetchSearchSaga","fetchCurrentWeatherSaga","getGeoLocationSaga","fetchGeoLocationSaga","fetchForecastSaga","action","urlCreator","searchEndpoint","get","put","console","weatherEndpoint","getUserLocation","Promise","resolve","navigator","geolocation","getCurrentPosition","location","call","latitude","longitude","geoEndpoint","EnglishName","Key","fetchFavoritesSaga","fetchSingleFav","map","key","apiCalls","all","fetchEndpoint","transformedData","watchHome","watchFavorites","takeLatest","takeEvery","initialState","selectedCityKey","selectedCityName","currentWeather","currentWeatherLoading","geoLocationArrived","forecasts","forecastLoading","reducer","fetchedFavorites","fetchFavoritesLoading","metric","darkTheme","AutoCompleteInput","inputVal","setInputVal","home","onSearchCityFetch","useCallback","onClearSearchResults","length","timer","setTimeout","clearTimeout","placeholder","onChange","event","target","onKeyPress","charCode","validLetter","preventDefault","SearchResults","selectCity","onSelectCity","city","LocalizedName","SearchCity","CityHeader","cCityName","cWeatherIcon","cWeatherTemp","cWeatherText","cCityKey","celToFar","celcius","toFixed","DayForecast","dailyForecast","Temperature","Day","Night","date","Date","dayIconPath","Icon","nightIconPath","dayTemp","Math","round","Maximum","Value","nightTemp","Minimum","weekDayNumber","getDay","weekDay","userSettings","CityForecast","forecastsList","Headline","DailyForecasts","Text","dayForecast","EpochDate","CurrentCity","onFetchCurrentWeather","onFetchForecast","WeatherText","WeatherIcon","currentTemp","Metric","Imperial","content","NavLinks","to","exact","activeClassName","Logo","TempCheckBox","tempSignPath","fahrenheit","Navigation","Footer","href","CoverImg","Layout","Favorites","React","lazy","App","onInitFavorites","onGetGeoLocation","routes","path","component","Home","fallback","Boolean","window","hostname","match","composeEnhancers","compose","rootReducer","combineReducers","homeReducer","favoriteReducer","userSettingsReducer","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunk","run","app","basename","process","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d82b0f0d.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://dataservice.accuweather.com/'\r\n});\r\n\r\nexport default instance;","export const CHANGE_TEMP = 'CHANGE_TEMP';\r\nexport const CHANGE_THEME = 'CHANGE_THEME';\r\n\r\nexport const FETCH_SEARCH = 'FETCH_SEARCH';\r\nexport const FETCH_SEARCH_SUCCESS = 'FETCH_SEARCH_SUCCESS'; \r\nexport const CLEAR_SEARCH_RESULTS = 'CLEAR_SEARCH_RESULTS';\r\n\r\nexport const UPDATE_SELECTED_CITY = 'UPDATE_SELECTED_CITY'; \r\nexport const FETCH_CURRENT_WEATHER = 'FETCH_CURRENT_WEATHER';\r\nexport const FETCH_CURRENT_WEATHER_START = 'FETCH_CURRENT_WEATHER_START';\r\nexport const FETCH_CURRENT_WEATHER_SUCCESS = 'FETCH_CURRENT_WEATHER_SUCCESS';\r\n\r\nexport const GET_GEO_LOCATION = 'GET_GEO_LOCATION';\r\nexport const FETCH_GEO_LOCATION ='FETCH_GEO_LOCATION'; \r\nexport const FETCH_GEO_LOCATION_SUCCESS = 'FETCH_GEO_LOCATION_SUCCESS';\r\nexport const FETCH_GEO_LOCATION_FAIL = 'FETCH_GEO_LOCATION_FAIL';\r\n\r\nexport const FETCH_FORECAST = 'FETCH_FORECAST';\r\nexport const FETCH_FORECAST_START = 'FETCH_FORECAST_START';\r\nexport const FETCH_FORECAST_SUCCESS = 'FETCH_FORECAST_SUCCESS';\r\n\r\nexport const SET_FAVORITES = 'SET_FAVORITES';\r\nexport const REMOVE_FAVORITE = 'REMOVE_FAVORITE';\r\nexport const ADD_FAVORITE = 'REMOVE_FAVORITE';\r\n\r\nexport const FETCH_FAVORITES = 'FETCH_FAVORITES';\r\nexport const FETCH_FAVORITES_START = 'FETCH_FAVORITES_START';\r\nexport const FETCH_FAVORITES_SUCCESS = 'FETCH_FAVORITES_SUCCESS';\r\nexport const CLEAR_FETCHED_FAVORITES = 'CLEAR_FETCHED_FAVORITES';\r\n\r\n\r\n\r\n\r\n \r\n","export const getIconPath = (iconNumber) => {\r\n    return './icons/' + iconNumber + '-s.png';\r\n};","import React from 'react';\r\nimport sunSpinner from '../../../assets/images/sunLoading.png';\r\n\r\nconst Spinner = (props) => {\r\n    return <img className='spinner' src={sunSpinner} alt='Loading...'></img>\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\n\r\nconst backdrop = (props) => (\r\n    props.show ? <div className='backdrop' onClick={props.clicked}></div> : null\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\nimport Backdrop from './Backdrop/Backdrop';\r\n\r\nconst Modal = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <Backdrop \r\n                show={props.show}\r\n                clicked={props.clicked}/>\r\n            <div \r\n                className='modal'\r\n                style={{\r\n                    transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                    opacity: props.show ? '1' : '0'\r\n                }}>\r\n                {props.children}\r\n            \r\n\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport useHttpErrorHook from '../../hooks/http-error-handler/http-error-handler'\r\n\r\nconst withErrorHandler = (WrappedComponent, axios) => {\r\n    return (props) => {\r\n        const [error, clearError] = useHttpErrorHook(axios); \r\n\r\n        let errorMessage = null;\r\n        if (error) {\r\n            errorMessage = (\r\n                <div className='errorHandler'>\r\n                    <p className='errorHandler__title'>Error occurred</p>\r\n                    <p className='errorHandler__message'>{error.message}, please try again in few minutes</p>\r\n                </div>\r\n            );\r\n            \r\n        }\r\n        \r\n        return (\r\n            <React.Fragment>\r\n                <Modal \r\n                    show={error}\r\n                    clicked={clearError}>\r\n\r\n                    {errorMessage}\r\n                </Modal>\r\n                <WrappedComponent error={error} {...props}/>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n};\r\n\r\nexport default withErrorHandler;","import { useState, useEffect } from 'react';\r\n\r\n\r\nexport default httpClient => {\r\n    const [error, setError] = useState(null);\r\n\r\n    const reqInterceptor = httpClient.interceptors.request.use(req => {\r\n        setError(null);\r\n        return req;\r\n    });\r\n    const resInterceptor = httpClient.interceptors.response.use(res => res, err => {\r\n        setError(err);\r\n    });\r\n  \r\n\r\n    //clear intercaptors when unMount\r\n    useEffect(() => {\r\n        return () => {\r\n        httpClient.interceptors.request.eject(reqInterceptor);\r\n        httpClient.interceptors.response.eject(resInterceptor);\r\n        }\r\n\r\n    }, [httpClient.interceptors.request, httpClient.interceptors.response, reqInterceptor, resInterceptor]);\r\n\r\n    const errorConfirmedHandler = () => {\r\n        setError(null);\r\n    };\r\n\r\n    return [error, errorConfirmedHandler]\r\n};","export const favoriteCheck = (selectedKey, favorites) => {\r\n    return favorites.some(element => element.cityKey === selectedKey);\r\n};","import React from 'react'; \r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { favoriteCheck } from '../../../shared/favoriteCheck';\r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\n\r\nconst FavoriteHeart = (props) => {\r\n    const { favorites } = useSelector(state => state.favorites);\r\n    const dispatch = useDispatch();\r\n    const onRemoveFavorite = (cityKey, favorites) => dispatch(actions.removeFavorite(cityKey, favorites));\r\n    const onAddFavorite = (cityKey, cityName, favorites) => dispatch(actions.addFavorite(cityKey, cityName, favorites));\r\n    const colors = {\r\n        selected: '#e31b23',\r\n        notSelected: '#777'\r\n    };\r\n\r\n    const heartStyle = {\r\n        backgroundColor: colors.notSelected,\r\n        height: props.height,\r\n        width: props.width\r\n    };\r\n\r\n    if (favoriteCheck(props.cityKey, favorites)) {\r\n        heartStyle.backgroundColor = colors.selected\r\n    };\r\n\r\n    const favoriteHandler = (cityKey, cityName) => {\r\n        if (favoriteCheck(cityKey, favorites)) {\r\n            onRemoveFavorite(cityKey, favorites);\r\n        } else {\r\n            onAddFavorite(cityKey, cityName, favorites);\r\n        };\r\n    };\r\n\r\n    return (\r\n            <div \r\n                className=\"favoriteHeart\"\r\n                style={heartStyle}\r\n                onClick={() => favoriteHandler(props.cityKey, props.cityName)}>\r\n            </div>\r\n    );\r\n};  \r\n\r\nexport default FavoriteHeart","module.exports = __webpack_public_path__ + \"static/media/sunLoading.3d7f5242.png\";","module.exports = __webpack_public_path__ + \"static/media/celsius.802510af.svg\";","module.exports = __webpack_public_path__ + \"static/media/fahrenheit.0a3403d1.svg\";","import * as actionTypes from './actionTypes';\r\n\r\nexport const changeTemp = () => {\r\n    return {\r\n        type: actionTypes.CHANGE_TEMP\r\n    };\r\n};\r\n\r\nexport const changeTheme = () => {\r\n    return {\r\n        type: actionTypes.CHANGE_THEME\r\n    };\r\n};","import * as actionTypes from './actionTypes';\r\n\r\n//Fatch autocomplete search\r\n    \r\nexport const fetchSearchSuccess = (results) => {\r\n    return {\r\n        type: actionTypes.FETCH_SEARCH_SUCCESS,\r\n        searchResults: results\r\n    };\r\n};\r\n\r\nexport const fetchSearch = (cityKey) => {\r\n    return {\r\n        type: actionTypes.FETCH_SEARCH,\r\n        value: cityKey\r\n    };\r\n};\r\n\r\nexport const clearSearchResults = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_SEARCH_RESULTS\r\n    };\r\n};\r\n\r\nexport const updateSelectedCity = (cityName, cityKey) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SELECTED_CITY,\r\n        cityName: cityName,\r\n        cityKey: cityKey\r\n    };\r\n};\r\n\r\n//Fetch current weather \r\n\r\nexport const fetchCurrentWeather = ( cityKey ) => {\r\n    return {\r\n        type: actionTypes.FETCH_CURRENT_WEATHER,\r\n        cityKey: cityKey\r\n    };\r\n};\r\n\r\nexport const fetchCurrentWeatherStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_CURRENT_WEATHER_START\r\n    };\r\n};\r\n\r\nexport const fetchCurrentWeatherSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_CURRENT_WEATHER_SUCCESS,\r\n        data: data\r\n    };\r\n};\r\n\r\n\r\n//Geo location \r\n\r\nexport const getGeoLocation = () => {\r\n    return {\r\n        type: actionTypes.GET_GEO_LOCATION\r\n    };\r\n};\r\n\r\nexport const fetchGeoLocation = (coords) => {\r\n    return {\r\n        type: actionTypes.FETCH_GEO_LOCATION,\r\n        coords: coords\r\n    };\r\n};  \r\n\r\nexport const fetchGeoLocationSuccess = (cityName, cityKey) => {\r\n    return {\r\n        type: actionTypes.FETCH_GEO_LOCATION_SUCCESS,\r\n        cityName: cityName,\r\n        cityKey: cityKey\r\n    };\r\n};  \r\n\r\nexport const fetchGeoLocationFail = () => {\r\n    return {\r\n        type: actionTypes.FETCH_GEO_LOCATION_FAIL\r\n    };\r\n};\r\n\r\n\r\n//Fetch forecast\r\n\r\nexport const fetchForecast = (cityKey) => {\r\n    return {\r\n        type: actionTypes.FETCH_FORECAST,\r\n        cityKey: cityKey\r\n    };\r\n};\r\n\r\nexport const fetchForecastSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_FORECAST_SUCCESS,\r\n        data: data\r\n    };\r\n};\r\n\r\nexport const fetchForecastStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_FORECAST_START\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as actionTypes from './actionTypes';\r\n\r\n//Sync actions (ADD/REMOVE/INIT)\r\nexport const initFavorites = () => {\r\n    let favorites = [];\r\n    const localFavorites = localStorage.getItem('userFav');\r\n    if (localFavorites !== null) {\r\n        favorites = JSON.parse(localFavorites);\r\n    };\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        newFavorites: favorites\r\n    };\r\n};\r\n\r\nexport const removeFavorite = (cityKey, favorites) => {\r\n    let newFavorites = favorites.filter(fav => cityKey !== fav.cityKey);\r\n    localStorage.setItem('userFav', JSON.stringify(newFavorites));\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        newFavorites: newFavorites\r\n    };\r\n};\r\n\r\nexport const addFavorite = (cityKey, cityName, favorites) => {\r\n    let newFavorites = favorites.concat({cityKey: cityKey, cityName: cityName});\r\n    localStorage.setItem('userFav', JSON.stringify(newFavorites));\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        newFavorites: newFavorites\r\n    };\r\n};\r\n\r\n//Async fetch all \r\nexport const fetchFavorites = (cityKeysList) => {\r\n    return {\r\n        type: actionTypes.FETCH_FAVORITES,\r\n        cityList: cityKeysList\r\n    };\r\n};\r\n\r\nexport const fetchFavoritesStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_FAVORITES_START\r\n    };\r\n};\r\n\r\nexport const fetchFavoritesSuccess = (results) => {\r\n    return {\r\n        type: actionTypes.FETCH_FAVORITES_SUCCESS,\r\n        citysData: results\r\n    };\r\n};\r\n\r\nexport const clearFetchedFavorites = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_FETCHED_FAVORITES\r\n    };\r\n};","export { changeTemp, changeTheme } from './userSettings';\r\nexport {\r\n    fetchSearch, \r\n    fetchSearchSuccess, \r\n    clearSearchResults, \r\n    updateSelectedCity,\r\n    fetchCurrentWeather,\r\n    fetchCurrentWeatherStart,\r\n    fetchCurrentWeatherSuccess,\r\n    getGeoLocation,\r\n    fetchGeoLocation,\r\n    fetchGeoLocationSuccess,\r\n    fetchForecast,\r\n    fetchForecastSuccess,\r\n    fetchForecastStart,\r\n    fetchGeoLocationFail\r\n} from './home';\r\n\r\nexport {\r\n    initFavorites,\r\n    removeFavorite,\r\n    addFavorite,\r\n    fetchFavorites,\r\n    fetchFavoritesStart,\r\n    fetchFavoritesSuccess,\r\n    clearFetchedFavorites\r\n} from './favorites';","\r\nconst apiKey = 'u9RaORaXroYFdUkpSTgfjH3Rs8ETJ2bn';\r\nconst basePath = 'https://dataservice.accuweather.com/';\r\n\r\nexport const autoCompleteEndpoint = (q) => {\r\n    return basePath + 'locations/v1/cities/autocomplete?apikey=' + apiKey + '&q=' + q;\r\n};\r\n\r\nexport const currentWeatherEndpoint = (cityKey) => {\r\n    return basePath + 'currentconditions/v1/' + cityKey + '?apikey=' + apiKey;\r\n};\r\n\r\nexport const getoLocationEndpoint = (lat, lon) => {\r\n    return basePath + 'locations/v1/cities/geoposition/search?apikey=' + apiKey + '&q=' + lat + '%2C' + lon;\r\n};  \r\n\r\nexport const forecastEndpoint = (cityKey) => {\r\n    return basePath + 'forecasts/v1/daily/5day/' + cityKey + '?apikey=' + apiKey + '&metric=true';\r\n};","import { put, call } from 'redux-saga/effects';\r\nimport * as actions from '../actions/rootActions';\r\nimport axios from '../../shared/axios-weather';\r\nimport * as urlCreator from '../../shared/urlCreator';\r\n\r\nexport function* fetchSearchSaga(action) {\r\n    const searchEndpoint =  yield urlCreator.autoCompleteEndpoint(action.value);\r\n    try{\r\n        const response = yield axios.get(searchEndpoint);\r\n        yield put(actions.fetchSearchSuccess(response.data));\r\n    } catch (error) {\r\n        console.error(error);\r\n    };        \r\n};\r\n\r\nexport function* fetchCurrentWeatherSaga(action) {\r\n    const weatherEndpoint = yield urlCreator.currentWeatherEndpoint(action.cityKey);\r\n    yield put(actions.fetchCurrentWeatherStart);\r\n    try {\r\n        const response = yield axios.get(weatherEndpoint);\r\n        yield put(actions.fetchCurrentWeatherSuccess(response.data));\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\n\r\nconst getUserLocation = () => new Promise((resolve) => {\r\n    \r\n    navigator.geolocation.getCurrentPosition(\r\n        location => resolve(location),\r\n        error => resolve(error),\r\n    );\r\n});\r\n\r\nexport function* getGeoLocationSaga(action) {\r\n    const location  = yield call(getUserLocation);\r\n    if ( location.coords ) {\r\n        yield put(actions.fetchGeoLocation(location.coords));\r\n    } else {\r\n        yield put(actions.updateSelectedCity('Tel-Aviv', '215854'));\r\n        yield put(actions.fetchGeoLocationFail());\r\n    };\r\n};\r\n\r\nexport function* fetchGeoLocationSaga (action) {\r\n    const { latitude, longitude } = action.coords;\r\n    const geoEndpoint = yield urlCreator.getoLocationEndpoint(latitude, longitude);\r\n    try {\r\n        const response = yield axios.get(geoEndpoint); \r\n        const { EnglishName, Key } = response.data;\r\n        yield put(actions.fetchGeoLocationSuccess(EnglishName, Key));\r\n    } catch (error) {\r\n        yield put(actions.updateSelectedCity('Tel-Aviv', '215854'));\r\n        yield put(actions.fetchGeoLocationFail());\r\n    };\r\n};\r\n\r\nexport function* fetchForecastSaga(action) {\r\n\r\n    const forecastEndpoint = yield urlCreator.forecastEndpoint(action.cityKey);\r\n    yield put(actions.fetchForecastStart());\r\n    try {\r\n        const response = yield axios.get(forecastEndpoint)\r\n        yield put(actions.fetchForecastSuccess(response.data));\r\n    } catch (error) {\r\n\r\n    }\r\n};\r\n","import { put, all } from 'redux-saga/effects';\r\nimport axios from '../../shared/axios-weather';\r\nimport { currentWeatherEndpoint } from '../../shared/urlCreator';\r\nimport * as actions from '../actions/rootActions';\r\n\r\n\r\nexport function* fetchFavoritesSaga(action) {\r\n    yield put(actions.fetchFavoritesStart());\r\n    const apiCalls = yield action.cityList.map(key => fetchSingleFav(key));\r\n    const results = yield all(apiCalls);\r\n    yield put(actions.fetchFavoritesSuccess(results));\r\n};\r\n\r\nfunction* fetchSingleFav(cityKey) {\r\n    const fetchEndpoint = currentWeatherEndpoint(cityKey);\r\n    try {\r\n        const response = yield axios.get(fetchEndpoint);\r\n        const transformedData = {cityKey: cityKey, data: response.data};\r\n        return transformedData;\r\n    } catch (error) {\r\n        console.error('error Fetching favorite ' + cityKey)\r\n    };\r\n};\r\n\r\n","import { all, takeLatest, takeEvery } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport { \r\n    fetchSearchSaga, \r\n    fetchCurrentWeatherSaga, \r\n    getGeoLocationSaga, \r\n    fetchGeoLocationSaga,\r\n    fetchForecastSaga \r\n} from './home';\r\nimport { fetchFavoritesSaga } from './favorites'\r\n\r\n\r\nexport function* watchHome() {\r\n    yield all ([\r\n        takeLatest(actionTypes.FETCH_SEARCH, fetchSearchSaga),\r\n        takeLatest(actionTypes.FETCH_CURRENT_WEATHER, fetchCurrentWeatherSaga),\r\n        takeEvery(actionTypes.GET_GEO_LOCATION, getGeoLocationSaga),\r\n        takeEvery(actionTypes.FETCH_GEO_LOCATION, fetchGeoLocationSaga),\r\n        takeLatest(actionTypes.FETCH_FORECAST, fetchForecastSaga)\r\n    ]);\r\n};\r\n\r\nexport function* watchFavorites() {\r\n    yield all ([\r\n        takeLatest(actionTypes.FETCH_FAVORITES, fetchFavoritesSaga)\r\n    ]);\r\n};\r\n\r\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\n// '215854' 'Tel-Aviv'\r\nconst initialState = {\r\n    selectedCityKey: null,\r\n    selectedCityName: null,\r\n    searchResults: [],\r\n    currentWeather: null,\r\n    currentWeatherLoading: true,\r\n    geoLocationArrived: false,\r\n    forecasts: null,\r\n    forecastLoading: true\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_SEARCH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                searchResults: action.searchResults\r\n            }\r\n        case actionTypes.CLEAR_SEARCH_RESULTS:\r\n            return {\r\n                ...state,\r\n                searchResults: []\r\n            }\r\n        case actionTypes.UPDATE_SELECTED_CITY:\r\n            \r\n            return {\r\n                ...state,\r\n                selectedCityKey: action.cityKey,\r\n                selectedCityName: action.cityName\r\n            };\r\n        case actionTypes.FETCH_CURRENT_WEATHER_START:\r\n            return {\r\n                ...state,\r\n                currentWeatherLoading: true\r\n            };\r\n        case actionTypes.FETCH_CURRENT_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                currentWeatherLoading: false,\r\n                currentWeather: action.data\r\n\r\n            };\r\n        case actionTypes.FETCH_GEO_LOCATION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                selectedCityKey: action.cityKey,\r\n                selectedCityName: action.cityName,\r\n                geoLocationArrived: true\r\n            };\r\n        case actionTypes.FETCH_GEO_LOCATION_FAIL:\r\n            return {\r\n                ...state,\r\n                geoLocationArrived: true\r\n            }\r\n        case actionTypes.FETCH_FORECAST_START:\r\n            return {\r\n                ...state, \r\n                forecastLoading: true\r\n            };\r\n        case actionTypes.FETCH_FORECAST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                forecasts: action.data,\r\n                forecastLoading: false\r\n            };\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\n\r\nconst initialState = {\r\n    favorites: [],\r\n    fetchedFavorites: [],\r\n    fetchFavoritesLoading: true\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_FAVORITES: \r\n            return { \r\n                ...state,\r\n                favorites: action.newFavorites \r\n            };\r\n        case actionTypes.FETCH_FAVORITES_START:\r\n            return {\r\n                ...state,\r\n                fetchFavoritesLoading: true\r\n            }\r\n        case actionTypes.FETCH_FAVORITES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                fetchedFavorites: action.citysData,\r\n                fetchFavoritesLoading: false\r\n            };\r\n        case actionTypes.CLEAR_FETCHED_FAVORITES:\r\n            return {\r\n                ...state,\r\n                fetchedFavorites: [],\r\n                fetchFavoritesLoading: true\r\n            }\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    metric: true,\r\n    darkTheme: false\r\n\r\n}\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_TEMP:\r\n            return {\r\n                ...state,\r\n                metric: !state.metric\r\n            };\r\n        case actionTypes.CHANGE_THEME:\r\n            return {\r\n                ...state,\r\n                darkTheme: !state.darkTheme\r\n            }\r\n        default: return state\r\n    };\r\n};\r\n\r\nexport default reducer;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { validLetter } from '../../../shared/validEnglishLetters';\r\nimport * as actions from '../../../store/actions/rootActions';\r\n    \r\nconst AutoCompleteInput = (props) => {\r\n    const [ inputVal, setInputVal ] = useState('');\r\n    const { selectedCityKey } = useSelector(state => state.home);\r\n    const dispatch = useDispatch();\r\n    const onSearchCityFetch = useCallback((cityKey) => dispatch(actions.fetchSearch(cityKey)), [dispatch]);\r\n    const onClearSearchResults = useCallback(() => dispatch(actions.clearSearchResults()), [dispatch])\r\n    \r\n    useEffect(() => {\r\n        if ( inputVal !== ' ' && inputVal.length !== 0 ) {\r\n            const timer = setTimeout(() => {\r\n                onSearchCityFetch(inputVal);\r\n            }, 300);\r\n            return () => {\r\n                clearTimeout(timer);\r\n            };\r\n        };\r\n    },[inputVal, onSearchCityFetch]);\r\n\r\n    //for resetting the input when new city selected\r\n    useEffect(() => {\r\n        setInputVal('');\r\n    }, [selectedCityKey])\r\n\r\n    const inputChangedHandler = (event) => {\r\n        setInputVal(event.target.value);\r\n        if ( event.target.value.length === 0 ) {\r\n            onClearSearchResults();\r\n        };\r\n    };\r\n\r\n    const validKeyHandler = (event) => {\r\n        if (!validLetter(event)){\r\n            event.preventDefault()\r\n        };\r\n    };\r\n\r\n    return (\r\n        <input\r\n            className='searchCity__input'\r\n            placeholder='Search city'\r\n            type='text'\r\n            onChange={inputChangedHandler}\r\n            onKeyPress={validKeyHandler}\r\n            value={inputVal} />\r\n    ) ;\r\n};\r\n\r\nexport default AutoCompleteInput;","export const validLetter = ( event ) => {\r\n    const { charCode } = event ;\r\n    if(charCode >= 60 && charCode <= 90){\r\n        return true;\r\n    };\r\n    if(charCode >= 97 && charCode <= 122){\r\n        return true;\r\n    };\r\n    if(charCode === 32){\r\n        return true\r\n    };\r\n    return false;\r\n};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\nconst SearchResults = () => {\r\n\r\n    const { selectedCityKey } = useSelector( state => state.home);\r\n    const { searchResults } = useSelector(state => state.home);\r\n    const dispatch = useDispatch();\r\n    const onSelectCity = (cityName, cityKey) => dispatch(actions.updateSelectedCity(cityName, cityKey))\r\n    const onClearSearchResults = () => dispatch(actions.clearSearchResults());\r\n    \r\n    const selectCity = (cityName, cityKey) => {\r\n        if (cityName !== selectedCityKey ) {\r\n            onSelectCity(cityName, cityKey);\r\n            onClearSearchResults();\r\n        };       \r\n    };\r\n    \r\n\r\n    \r\n    const results = searchResults.map(city => {\r\n        const { LocalizedName, Key } = city;\r\n        return (\r\n            <li\r\n                className='searchCity__item'\r\n                onClick={() => selectCity(LocalizedName, Key)}\r\n                key={Key} \r\n                >\r\n                {LocalizedName}\r\n            </li>             \r\n        );\r\n    })\r\n    \r\n    return (\r\n        <ul className='searchCity__results'>\r\n            {results}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default SearchResults;","import React from 'react';\r\n\r\n\r\nimport AutoCompleteInput from './AutCompleteInput/AutoCompleteInput';\r\nimport SearchResults from './SearchResults/SearchResults';\r\n\r\nconst SearchCity = (props) => {\r\n\r\n    return (\r\n        <div className='searchCity-wrapper'>\r\n            <div className=\"searchCity\">\r\n                <AutoCompleteInput />\r\n                <SearchResults />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchCity;","import React from 'react';\r\nimport FavoriteHeart from '../../UI/FavoriteHeart/FavoriteHeart';\r\n// import SunIcon from '../../../assets/images/weather-icons/01-s.png';\r\nimport { getIconPath } from '../../../shared/getIconPath';\r\n\r\nconst CityHeader = (props) => {\r\n\r\n    return (\r\n        <header className='cityHeader'>\r\n            <div className='cityHeader__details'>\r\n                <p className='cityHeader__details-title'>{props.cCityName}</p>\r\n                <div className=\"cityHeader__details-container\">\r\n                    <img className='cityHeader__icon' src={getIconPath(props.cWeatherIcon)} alt={'dsd'} />\r\n                    <div className=\"cityHeader__details-subContainer\">\r\n                        <p className='cityHeader__details-temp'>{props.cWeatherTemp}°</p>\r\n                        <div className='cityHeader__details-text'><em>{props.cWeatherText}</em></div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            \r\n            <FavoriteHeart \r\n                cityKey={props.cCityKey}\r\n                cityName={props.cCityName}\r\n                height='7rem'\r\n                width='7rem' />\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default CityHeader;","export const celToFar = (celcius) => {\r\n   \r\n    return ((celcius * 1.8) + 32).toFixed(0);\r\n};  ","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getIconPath } from '../../../../shared/getIconPath';\r\nimport { getWeekDay } from '../../../../shared/getWeekDay';\r\nimport { celToFar } from '../../../../shared/convertTemp'\r\n\r\n\r\nconst DayForecast = (props) => {\r\n    const { Temperature, Day, Night  } = props.dailyForecast;\r\n    const date = props.dailyForecast.Date;\r\n    const dayIconPath = getIconPath(Day.Icon);\r\n    const nightIconPath = getIconPath(Night.Icon);\r\n    let dayTemp = Math.round(Temperature.Maximum.Value);\r\n    let nightTemp = Math.round(Temperature.Minimum.Value);\r\n    const weekDayNumber = new Date(date).getDay();\r\n    const weekDay = getWeekDay(weekDayNumber);\r\n    const { metric } = useSelector(state => state.userSettings);\r\n\r\n    if (!metric) {\r\n        dayTemp = celToFar(dayTemp);\r\n        nightTemp = celToFar(nightTemp);\r\n    }\r\n\r\n    return (\r\n        <div className='cityForecast__day'>\r\n            <p className='cityForecast__day-title'>{weekDay}</p>\r\n            <div className='cityForecast__day-container'>\r\n                <div className='cityForecast__details'>\r\n                    <p className='cityForecast__details-title'>Day:</p>\r\n                    <p className='cityForecast__details-temp'>{dayTemp}°</p>\r\n                    <img className='cityForecast__icon' src={dayIconPath} alt={'dsd'} />\r\n                </div>\r\n                <div className='cityForecast__details'>\r\n                    <p className='cityForecast__details-title'>Night:</p>\r\n                    <p className='cityForecast__details-temp'>{nightTemp}°</p>\r\n                    <img className='cityForecast__details-icon' src={nightIconPath} alt={'dsd'} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DayForecast;","export const getWeekDay = (weekDayNum) => {\r\n    const weekDayList = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    return weekDayList[weekDayNum];\r\n};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport DayForecast from './DayForecast/DayForecast';\r\n\r\n\r\nconst CityForecast = () => {\r\n\r\n    const { forecasts } = useSelector(state => state.home);\r\n  \r\n    \r\n    let forecastsList = null;\r\n    if (forecasts) {\r\n    \r\n        const { Headline, DailyForecasts} = forecasts;\r\n        forecastsList = (\r\n            <React.Fragment>\r\n                <h1 className='cityForecast__title'><em>{Headline.Text}</em></h1>\r\n                <div className='cityForecast__forecasts'>\r\n                    {DailyForecasts.map(dayForecast => {\r\n                        return <DayForecast \r\n                                    key={dayForecast.EpochDate}\r\n                                    dailyForecast={dayForecast}/>\r\n                    })}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className='cityForecast'>\r\n            {forecastsList}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityForecast;","import React, { useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CityHeader from './CityHeader/CityHeader';\r\nimport CityForecast from './CityForecast/CityForecast';\r\nimport * as actions from '../../store/actions/rootActions';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\nconst CurrentCity = () => {\r\n    const { selectedCityKey, selectedCityName, geoLocationArrived, currentWeatherLoading, forecastLoading  } = useSelector(state => state.home); \r\n    const currentWeather = useSelector(state => state.home.currentWeather);\r\n    const { metric } = useSelector(state => state.userSettings);\r\n    const dispatch = useDispatch();\r\n    const onFetchCurrentWeather = useCallback((cityKey) => dispatch(actions.fetchCurrentWeather(cityKey)), [dispatch]);\r\n    const onFetchForecast = useCallback((cityKey) => dispatch(actions.fetchForecast(cityKey)), [dispatch]);\r\n\r\n    if (currentWeather) {\r\n        var { WeatherText, WeatherIcon, Temperature } = currentWeather[0];\r\n        var currentTemp = Temperature.Metric.Value;\r\n        if (!metric) {\r\n            currentTemp = Temperature.Imperial.Value;\r\n        };\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (selectedCityKey) {\r\n            onFetchForecast(selectedCityKey);\r\n            onFetchCurrentWeather(selectedCityKey);\r\n        };\r\n        \r\n    }, [onFetchCurrentWeather, onFetchForecast, geoLocationArrived, selectedCityKey]);\r\n\r\n    let content = <Spinner />;\r\n\r\n    if (!currentWeatherLoading && !forecastLoading) {\r\n        content = (\r\n            <React.Fragment>\r\n                <CityHeader \r\n                    cWeatherText={WeatherText}\r\n                    cWeatherIcon={WeatherIcon}\r\n                    cWeatherTemp={currentTemp}\r\n                    cCityName={selectedCityName}\r\n                    cCityKey={selectedCityKey} />\r\n                <CityForecast />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='currentCity'>\r\n            {content}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentCity;","import React from 'react'; \r\nimport SearchCity from '../../components/SearchCity/SearchCity';\r\nimport CurrentCity from '../../components/CurrentCity/CurrentCity';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport axios from '../../shared/axios-weather';\r\n\r\nconst Home = props => {\r\n\r\n    return (\r\n    <div className='home'>\r\n        <SearchCity />\r\n        <CurrentCity />\r\n    </div>\r\n    );\r\n};\r\n\r\n\r\nexport default withErrorHandler(Home, axios);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst NavLinks = () => {\r\n    return (\r\n        <ul className=\"navigation__list\">\r\n            <li className='navigation__item'>\r\n                <NavLink\r\n                    to=\"/\"\r\n                    exact\r\n                    className='navigation__link'\r\n                    activeClassName=\"navigation__item--active\"\r\n                    >Home\r\n                </NavLink>\r\n            </li>\r\n\r\n            <li className='navigation__item'>\r\n                <NavLink\r\n                    to=\"/favorites\"\r\n                    className='navigation__link'\r\n                    activeClassName=\"navigation__item--active\"\r\n                    >Favorites\r\n                </NavLink>\r\n            </li>\r\n            \r\n            \r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default NavLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Logo = () => {\r\n\r\n    return (\r\n        <Link className='logo' to=\"/\">\r\n            <h1 className=\"logo__title\">Herolo Weather</h1>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\nimport celcius from '../../../assets/images/celsius.svg';\r\nimport fahrenheit  from '../../../assets/images/fahrenheit.svg'\r\nimport { useDispatch, useSelector } from 'react-redux'; \r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\nconst TempCheckBox = props => {\r\n    const dispatch = useDispatch();\r\n    const metric = useSelector((state) => state.userSettings.metric);\r\n    const onChangeTemp = () => dispatch(actions.changeTemp());\r\n\r\n\r\n    const changeTempHandler = () => {\r\n        onChangeTemp();\r\n    };\r\n\r\n    let tempSignPath =  celcius;\r\n\r\n    if ( !metric ) {\r\n        tempSignPath = fahrenheit;\r\n    };\r\n\r\n    return (\r\n        <div className=\"tempCheckBox\" onClick={changeTempHandler}>\r\n            <p className='tempCheckBox__title'>Temperature</p>\r\n            <img className='tempCheckBox__img' src={tempSignPath} alt='Temp Selector'></img>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TempCheckBox;","import React from 'react';\r\n\r\n\r\nimport NavLinks from './NavLinks/NavLinks'\r\nimport Logo from '../Logo/Logo';\r\nimport TempCheckBox from '../UI/TempCheckBox/TempCheckBox'\r\n\r\nconst Navigation = props => {\r\n    return (\r\n        <div className=\"navigation\">\r\n            <React.Fragment> \r\n                <Logo />\r\n                <NavLinks />\r\n                <div className=\"navigation__settings\">\r\n                    <TempCheckBox />\r\n                    {/* <ThemeSelector /> */}\r\n                </div>\r\n            </React.Fragment>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className='footer'>\r\n            <p className='footer__title'>Developed by Yaron Sultan - 2019</p>\r\n            <div className='footer__media'>\r\n                <a className='footer__icon footer__icon--linkedin' href='https://www.linkedin.com/in/yaron-sultan-b52bb9164/'>&nbsp;</a>\r\n                <a className='footer__icon footer__icon--github' href='https://github.com/Sultanyaron'>&nbsp;</a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n\r\nconst CoverImg = () => {\r\n    // style={{backgroundImage: `url(${CoverImage})`}}\r\n    return(\r\n        <div className=\"coverImg\" >\r\n            123\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default CoverImg;","import React from 'react';\r\n\r\nimport Navigation from '../../components/Navigation/Navigation';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport CoverImg from '../../components/UI/CoverImg/CoverImg';\r\n\r\nconst Layout = props => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CoverImg/>\r\n            <Navigation />\r\n            {/* Pages switcher with Lazy Loading of Favorite component */}\r\n            { props.children }\r\n            <Footer />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Layout;","import React, { Suspense, useEffect, useCallback } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport * as actions from './store/actions/rootActions';\r\n\r\nimport Home from './containers/Home/Home';\r\nimport Layout from './hoc/Layout/Layout';\r\n\r\nconst Favorites = React.lazy(() => {\r\n    return import('./containers/Favorites/Favorites');\r\n});\r\n\r\n\r\nconst App = props => {\r\n    const dispatch = useDispatch();\r\n    const onInitFavorites = useCallback(() => dispatch(actions.initFavorites()), [dispatch]);\r\n    const onGetGeoLocation = useCallback(() => dispatch(actions.getGeoLocation()), [dispatch]);\r\n\r\n    useEffect(() => {\r\n        onInitFavorites();\r\n    }, [onInitFavorites] );\r\n\r\n    useEffect(() => {\r\n        onGetGeoLocation();\r\n    }, [onGetGeoLocation]);\r\n\r\n    let routes = (\r\n        <Switch>\r\n            <Route path={\"/favorites\"} component={Favorites}  />\r\n            <Route path={\"/\"} component={Home} />\r\n            <Redirect to={\"/\"} />\r\n        </Switch>\r\n    ); \r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Layout>\r\n                <Suspense fallback={<p>Loading...</p>}> <main className='mainContainer'>{ routes }</main>  </Suspense>\r\n            </Layout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { compose, combineReducers, createStore, applyMiddleware } from 'redux';\nimport { watchHome, watchFavorites } from './store/sagas/rootSaga';\nimport { BrowserRouter } from 'react-router-dom';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\nimport homeReducer from './store/reducers/home';\nimport favoriteReducer from './store/reducers/favorites';\nimport userSettingsReducer from './store/reducers/userSettings';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers({\n    home: homeReducer,\n    favorites : favoriteReducer,\n    userSettings: userSettingsReducer\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk, sagaMiddleware)\n));\n\nsagaMiddleware.run(watchHome);\nsagaMiddleware.run(watchFavorites);\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}