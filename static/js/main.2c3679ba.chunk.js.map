{"version":3,"sources":["assets/images/sunLoading.png","assets/images/celsius.svg","assets/images/fahrenheit.svg","store/actions/actionTypes.js","store/actions/home.js","shared/axios-weather.js","shared/urlCreator.js","store/sagas/home.js","store/sagas/rootSaga.js","store/reducers/home.js","store/reducers/favorites.js","store/reducers/userSettings.js","components/SearchCity/AutCompleteInput/AutoCompleteInput.js","shared/validEnglishLetters.js","components/SearchCity/SearchResults/SearchResults.js","components/SearchCity/SearchCity.js","shared/favoriteCheck.js","components/UI/FavoriteHeart/FavoriteHeart.js","store/actions/favorites.js","shared/getIconPath.js","components/CurrentCity/CityHeader/CityHeader.js","shared/convertTemp.js","components/CurrentCity/CityForecast/DayForecast/DayForecast.js","shared/getWeekDay.js","components/CurrentCity/CityForecast/CityForecast.js","components/UI/Spinner/Spinner.js","components/CurrentCity/CurrentCity.js","containers/Home/Home.js","components/Navigation/NavLinks/NavLinks.js","components/Logo/Logo.js","components/UI/TempCheckBox/TempCheckBox.js","store/actions/userSettings.js","components/Navigation/Navigation.js","components/Footer/Footer.js","components/UI/CoverImg/CoverImg.js","hoc/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FETCH_SEARCH","FETCH_CURRENT_WEATHER","GET_GEO_LOCATION","FETCH_GEO_LOCATION","FETCH_FORECAST","fetchSearchSuccess","results","type","searchResults","updateSelectedCity","cityName","cityKey","fetchCurrentWeatherStart","fetchCurrentWeatherSuccess","data","fetchGeoLocation","coords","actionTypes","fetchGeoLocationSuccess","fetchGeoLocationFail","fetchForecastSuccess","fetchForecastStart","instance","axios","create","baseURL","apiKey","basePath","autoCompleteEndpoint","q","currentWeatherEndpoint","getoLocationEndpoint","lat","lon","forecastEndpoint","fetchSearchSaga","fetchCurrentWeatherSaga","getGeoLocationSaga","fetchGeoLocationSaga","fetchForecastSaga","action","urlCreator","value","searchEndpoint","get","response","put","actions","console","log","weatherEndpoint","error","getUserLocation","Promise","resolve","navigator","geolocation","getCurrentPosition","location","call","latitude","longitude","geoEndpoint","EnglishName","Key","watchHome","all","takeLatest","takeEvery","initialState","selectedCityKey","selectedCityName","currentWeather","currentWeatherLoading","geoLocationArrived","forecasts","forecastLoading","reducer","state","favorites","newFavorites","metric","darkTheme","AutoCompleteInput","props","useState","inputVal","setInputVal","useSelector","home","dispatch","useDispatch","onSearchCityFetch","useCallback","onClearSearchResults","useEffect","length","timer","setTimeout","clearTimeout","className","placeholder","onChange","event","target","onKeyPress","charCode","validLetter","preventDefault","SearchResults","selectCity","onSelectCity","map","city","LocalizedName","onClick","key","SearchCity","favoriteCheck","selectedKey","some","element","FavoriteHeart","onRemoveFavorite","filter","fav","localStorage","setItem","JSON","stringify","onAddFavorite","concat","colors","heartStyle","backgroundColor","style","getIconPath","iconNumber","CityHeader","cCityName","src","cWeatherIcon","alt","cWeatherTemp","cWeatherText","cCityKey","celToFar","celcius","toFixed","DayForecast","dailyForecast","Temperature","Day","Night","date","Date","dayIconPath","Icon","nightIconPath","dayTemp","Math","round","Maximum","Value","nightTemp","Minimum","weekDayNumber","getDay","weekDay","userSettings","CityForecast","forecastsList","Headline","DailyForecasts","Fragment","Text","dayForecast","EpochDate","Spinner","sunSpinner","CurrentCity","onFetchCurrentWeather","onFetchForecast","onGetGeoLocation","WeatherText","WeatherIcon","currentTemp","Metric","Imperial","content","Home","NavLinks","to","process","exact","activeClassName","Logo","TempCheckBox","tempSignPath","fahrenheit","Navigation","Footer","CoverImg","Layout","children","Favorites","React","lazy","App","onInitFavorites","localFavorites","getItem","parse","routes","path","component","fallback","Boolean","window","hostname","match","composeEnhancers","compose","rootReducer","combineReducers","homeReducer","favoriteReducer","userSettingsReducer","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunk","run","app","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c3679ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sunLoading.3d7f5242.png\";","module.exports = __webpack_public_path__ + \"static/media/celsius.802510af.svg\";","module.exports = __webpack_public_path__ + \"static/media/fahrenheit.0a3403d1.svg\";","export const CHANGE_TEMP = 'CHANGE_TEMP';\r\nexport const CHANGE_THEME = 'CHANGE_THEME';\r\n\r\nexport const FETCH_SEARCH = 'FETCH_SEARCH';\r\nexport const FETCH_SEARCH_SUCCESS = 'FETCH_SEARCH_SUCCESS'; \r\nexport const CLEAR_SEARCH_RESULTS = 'CLEAR_SEARCH_RESULTS';\r\n\r\nexport const UPDATE_SELECTED_CITY = 'UPDATE_SELECTED_CITY'; \r\nexport const FETCH_CURRENT_WEATHER = 'FETCH_CURRENT_WEATHER';\r\nexport const FETCH_CURRENT_WEATHER_START = 'FETCH_CURRENT_WEATHER_START';\r\nexport const FETCH_CURRENT_WEATHER_SUCCESS = 'FETCH_CURRENT_WEATHER_SUCCESS';\r\n\r\nexport const GET_GEO_LOCATION = 'GET_GEO_LOCATION';\r\nexport const FETCH_GEO_LOCATION ='FETCH_GEO_LOCATION'; \r\nexport const FETCH_GEO_LOCATION_SUCCESS = 'FETCH_GEO_LOCATION_SUCCESS';\r\nexport const FETCH_GEO_LOCATION_FAIL = 'FETCH_GEO_LOCATION_FAIL';\r\n\r\nexport const FETCH_FORECAST = 'FETCH_FORECAST';\r\nexport const FETCH_FORECAST_START = 'FETCH_FORECAST_START';\r\nexport const FETCH_FORECAST_SUCCESS = 'FETCH_FORECAST_SUCCESS';\r\n\r\nexport const SET_FAVORITES = 'SET_FAVORITES';\r\nexport const REMOVE_FAVORITE = 'REMOVE_FAVORITE';\r\nexport const ADD_FAVORITE = 'REMOVE_FAVORITE';\r\n\r\n\r\n\r\n\r\n \r\n","import * as actionTypes from './actionTypes';\r\n\r\n//Fatch autocomplete search\r\n    \r\nexport const fetchSearchSuccess = (results) => {\r\n    return {\r\n        type: actionTypes.FETCH_SEARCH_SUCCESS,\r\n        searchResults: results\r\n    };\r\n};\r\n\r\nexport const fetchSearch = (cityKey) => {\r\n    return {\r\n        type: actionTypes.FETCH_SEARCH,\r\n        value: cityKey\r\n    };\r\n};\r\n\r\nexport const clearSearchResults = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_SEARCH_RESULTS\r\n    };\r\n};\r\n\r\nexport const updateSelectedCity = (cityName, cityKey) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SELECTED_CITY,\r\n        cityName: cityName,\r\n        cityKey: cityKey\r\n    };\r\n};\r\n\r\n//Fetch current weather \r\n\r\nexport const fetchCurrentWeather = ( cityKey ) => {\r\n    return {\r\n        type: actionTypes.FETCH_CURRENT_WEATHER,\r\n        cityKey: cityKey\r\n    };\r\n};\r\n\r\nexport const fetchCurrentWeatherStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_CURRENT_WEATHER_START\r\n    };\r\n};\r\n\r\nexport const fetchCurrentWeatherSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_CURRENT_WEATHER_SUCCESS,\r\n        data: data\r\n    };\r\n};\r\n\r\n\r\n//Geo location \r\n\r\nexport const getGeoLocation = () => {\r\n    return {\r\n        type: actionTypes.GET_GEO_LOCATION\r\n    };\r\n};\r\n\r\nexport const fetchGeoLocation = (coords) => {\r\n    return {\r\n        type: actionTypes.FETCH_GEO_LOCATION,\r\n        coords: coords\r\n    };\r\n};  \r\n\r\nexport const fetchGeoLocationSuccess = (cityName, cityKey) => {\r\n    return {\r\n        type: actionTypes.FETCH_GEO_LOCATION_SUCCESS,\r\n        cityName: cityName,\r\n        cityKey: cityKey\r\n    };\r\n};  \r\n\r\nexport const fetchGeoLocationFail = () => {\r\n    return {\r\n        type: actionTypes.FETCH_GEO_LOCATION_FAIL\r\n    };\r\n};\r\n\r\n\r\n//Fetch forecast\r\n\r\nexport const fetchForecast = (cityKey) => {\r\n    return {\r\n        type: actionTypes.FETCH_FORECAST,\r\n        cityKey: cityKey\r\n    };\r\n};\r\n\r\nexport const fetchForecastSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_FORECAST_SUCCESS,\r\n        data: data\r\n    };\r\n};\r\n\r\nexport const fetchForecastStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_FORECAST_START\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://dataservice.accuweather.com/'\r\n});\r\n\r\nexport default instance;","\r\nconst apiKey = 'u9RaORaXroYFdUkpSTgfjH3Rs8ETJ2bn';\r\nconst basePath = 'https://dataservice.accuweather.com/';\r\n\r\nexport const autoCompleteEndpoint = (q) => {\r\n    return basePath + 'locations/v1/cities/autocomplete?apikey=' + apiKey + '&q=' + q;\r\n};\r\n\r\nexport const currentWeatherEndpoint = (cityKey) => {\r\n    return basePath + 'currentconditions/v1/' + cityKey + '?apikey=' + apiKey;\r\n};\r\n\r\nexport const getoLocationEndpoint = (lat, lon) => {\r\n    return basePath + 'locations/v1/cities/geoposition/search?apikey=' + apiKey + '&q=' + lat + '%2C' + lon;\r\n};  \r\n\r\nexport const forecastEndpoint = (cityKey) => {\r\n    return basePath + 'forecasts/v1/daily/5day/' + cityKey + '?apikey=' + apiKey + '&metric=true';\r\n};","import { put, call } from 'redux-saga/effects';\r\nimport * as actions from '../actions/rootActions';\r\nimport axios from '../../shared/axios-weather';\r\nimport * as urlCreator from '../../shared/urlCreator';\r\n\r\nexport function* fetchSearchSaga(action) {\r\n    const searchEndpoint =  yield urlCreator.autoCompleteEndpoint(action.value);\r\n    try{\r\n        const response = yield axios.get(searchEndpoint);\r\n        yield put(actions.fetchSearchSuccess(response.data));\r\n    } catch (error) {\r\n        console.log(error);\r\n    };        \r\n};\r\n\r\nexport function* fetchCurrentWeatherSaga(action) {\r\n    const weatherEndpoint = yield urlCreator.currentWeatherEndpoint(action.cityKey);\r\n    yield put(actions.fetchCurrentWeatherStart);\r\n    try {\r\n        const response = yield axios.get(weatherEndpoint);\r\n        yield put(actions.fetchCurrentWeatherSuccess(response.data));\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\n\r\nconst getUserLocation = () => new Promise((resolve) => {\r\n    \r\n    navigator.geolocation.getCurrentPosition(\r\n        location => resolve(location),\r\n        error => resolve(error),\r\n    );\r\n});\r\n\r\nexport function* getGeoLocationSaga(action) {\r\n    const location  = yield call(getUserLocation);\r\n    if ( location.coords ) {\r\n        yield put(actions.fetchGeoLocation(location.coords));\r\n    } else {\r\n        yield put(actions.updateSelectedCity('Tel-Aviv', '215854'));\r\n        yield put(actions.fetchGeoLocationFail());\r\n    };\r\n};\r\n\r\nexport function* fetchGeoLocationSaga (action) {\r\n    const { latitude, longitude } = action.coords;\r\n    const geoEndpoint = yield urlCreator.getoLocationEndpoint(latitude, longitude);\r\n    try {\r\n        const response = yield axios.get(geoEndpoint); \r\n        const { EnglishName, Key } = response.data;\r\n        yield put(actions.fetchGeoLocationSuccess(EnglishName, Key));\r\n    } catch (error) {\r\n        yield put(actions.updateSelectedCity('Tel-Aviv', '215854'));\r\n        yield put(actions.fetchGeoLocationFail());\r\n    };\r\n};\r\n\r\nexport function* fetchForecastSaga(action) {\r\n\r\n    const forecastEndpoint = yield urlCreator.forecastEndpoint(action.cityKey);\r\n    yield put(actions.fetchForecastStart());\r\n    try {\r\n        const response = yield axios.get(forecastEndpoint)\r\n        yield put(actions.fetchForecastSuccess(response.data));\r\n    } catch (error) {\r\n\r\n    }\r\n};\r\n","import { all, takeLatest, takeEvery } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport { \r\n    fetchSearchSaga, \r\n    fetchCurrentWeatherSaga, \r\n    getGeoLocationSaga, \r\n    fetchGeoLocationSaga,\r\n    fetchForecastSaga \r\n} from './home';\r\n\r\n\r\nexport function* watchHome() {\r\n    yield all ([\r\n        takeLatest(actionTypes.FETCH_SEARCH, fetchSearchSaga),\r\n        takeLatest(actionTypes.FETCH_CURRENT_WEATHER, fetchCurrentWeatherSaga),\r\n        takeEvery(actionTypes.GET_GEO_LOCATION, getGeoLocationSaga),\r\n        takeEvery(actionTypes.FETCH_GEO_LOCATION, fetchGeoLocationSaga),\r\n        takeLatest(actionTypes.FETCH_FORECAST, fetchForecastSaga)\r\n    ]);\r\n};\r\n\r\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\n// '215854' 'Tel-Aviv'\r\nconst initialState = {\r\n    selectedCityKey: null,\r\n    selectedCityName: null,\r\n    searchResults: [],\r\n    currentWeather: null,\r\n    currentWeatherLoading: true,\r\n    geoLocationArrived: false,\r\n    forecasts: null,\r\n    forecastLoading: true\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_SEARCH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                searchResults: action.searchResults\r\n            }\r\n        case actionTypes.CLEAR_SEARCH_RESULTS:\r\n            return {\r\n                ...state,\r\n                searchResults: []\r\n            }\r\n        case actionTypes.UPDATE_SELECTED_CITY:\r\n            \r\n            return {\r\n                ...state,\r\n                selectedCityKey: action.cityKey,\r\n                selectedCityName: action.cityName\r\n            };\r\n        case actionTypes.FETCH_CURRENT_WEATHER_START:\r\n            return {\r\n                ...state,\r\n                currentWeatherLoading: true\r\n            };\r\n        case actionTypes.FETCH_CURRENT_WEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                currentWeatherLoading: false,\r\n                currentWeather: action.data\r\n\r\n            };\r\n        case actionTypes.FETCH_GEO_LOCATION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                selectedCityKey: action.cityKey,\r\n                selectedCityName: action.cityName,\r\n                geoLocationArrived: true\r\n            };\r\n        case actionTypes.FETCH_GEO_LOCATION_FAIL:\r\n            return {\r\n                ...state,\r\n                geoLocationArrived: true\r\n            }\r\n        case actionTypes.FETCH_FORECAST_START:\r\n            return {\r\n                ...state, \r\n                forecastLoading: true\r\n            };\r\n        case actionTypes.FETCH_FORECAST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                forecasts: action.data,\r\n                forecastLoading: false\r\n            };\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\n\r\nconst initialState = {\r\n    favorites: []\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_FAVORITES: \r\n            return { favorites: action.newFavorites }  \r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    metric: true,\r\n    darkTheme: false\r\n\r\n}\r\n\r\nconst reducer = ( state = initialState, action ) => {\r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_TEMP:\r\n            return {\r\n                ...state,\r\n                metric: !state.metric\r\n            };\r\n        case actionTypes.CHANGE_THEME:\r\n            return {\r\n                ...state,\r\n                darkTheme: !state.darkTheme\r\n            }\r\n        default: return state\r\n    };\r\n};\r\n\r\nexport default reducer;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { validLetter } from '../../../shared/validEnglishLetters';\r\nimport * as actions from '../../../store/actions/rootActions';\r\n    \r\nconst AutoCompleteInput = (props) => {\r\n    const [ inputVal, setInputVal ] = useState('');\r\n    const { selectedCityKey } = useSelector(state => state.home);\r\n    const dispatch = useDispatch();\r\n    const onSearchCityFetch = useCallback((cityKey) => dispatch(actions.fetchSearch(cityKey)), [dispatch]);\r\n    const onClearSearchResults = useCallback(() => dispatch(actions.clearSearchResults()), [dispatch])\r\n    \r\n    useEffect(() => {\r\n        if ( inputVal !== ' ' && inputVal.length !== 0 ) {\r\n            const timer = setTimeout(() => {\r\n                onSearchCityFetch(inputVal);\r\n            }, 300);\r\n            return () => {\r\n                clearTimeout(timer);\r\n            };\r\n        };\r\n    },[inputVal, onSearchCityFetch]);\r\n\r\n    //for resetting the input when new city selected\r\n    useEffect(() => {\r\n        setInputVal('');\r\n    }, [selectedCityKey])\r\n\r\n    const inputChangedHandler = (event) => {\r\n        setInputVal(event.target.value);\r\n        if ( event.target.value.length === 0 ) {\r\n            onClearSearchResults();\r\n        };\r\n    };\r\n\r\n    const validKeyHandler = (event) => {\r\n        if (!validLetter(event)){\r\n            event.preventDefault()\r\n        };\r\n    };\r\n\r\n    return (\r\n        <input\r\n            className='searchCity__input'\r\n            placeholder='Search city'\r\n            type='text'\r\n            onChange={inputChangedHandler}\r\n            onKeyPress={validKeyHandler}\r\n            value={inputVal} />\r\n    ) ;\r\n};\r\n\r\nexport default AutoCompleteInput;","export const validLetter = ( event ) => {\r\n    const { charCode } = event ;\r\n    if(charCode >= 60 && charCode <= 90){\r\n        return true;\r\n    };\r\n    if(charCode >= 97 && charCode <= 122){\r\n        return true;\r\n    };\r\n    if(charCode === 32){\r\n        return true\r\n    };\r\n    return false;\r\n};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\nconst SearchResults = () => {\r\n\r\n    const { selectedCityKey } = useSelector( state => state.home);\r\n    const { searchResults } = useSelector(state => state.home);\r\n    const dispatch = useDispatch();\r\n    const onSelectCity = (cityName, cityKey) => dispatch(actions.updateSelectedCity(cityName, cityKey))\r\n    const onClearSearchResults = () => dispatch(actions.clearSearchResults());\r\n    \r\n    const selectCity = (cityName, cityKey) => {\r\n        if (cityName !== selectedCityKey ) {\r\n            onSelectCity(cityName, cityKey);\r\n            onClearSearchResults();\r\n        };       \r\n    };\r\n    \r\n\r\n    \r\n    const results = searchResults.map(city => {\r\n        const { LocalizedName, Key } = city;\r\n        return (\r\n            <li\r\n                className='searchCity__item'\r\n                onClick={() => selectCity(LocalizedName, Key)}\r\n                key={Key} \r\n                >\r\n                {LocalizedName}\r\n            </li>             \r\n        );\r\n    })\r\n    \r\n    return (\r\n        <ul className='searchCity__results'>\r\n            {results}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default SearchResults;","import React from 'react';\r\n\r\n\r\nimport AutoCompleteInput from './AutCompleteInput/AutoCompleteInput';\r\nimport SearchResults from './SearchResults/SearchResults';\r\n\r\nconst SearchCity = (props) => {\r\n\r\n    return (\r\n        <div className='searchCity-wrapper'>\r\n            <div className=\"searchCity\">\r\n                <AutoCompleteInput />\r\n                <SearchResults />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchCity;","export const favoriteCheck = (selectedKey, favorites) => {\r\n    return favorites.some(element => element.cityKey === selectedKey);\r\n};","import React from 'react'; \r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { favoriteCheck } from '../../../shared/favoriteCheck';\r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\n\r\nconst FavoriteHeart = (props) => {\r\n    const { favorites } = useSelector(state => state.favorites);\r\n    const dispatch = useDispatch();\r\n    const onRemoveFavorite = (cityKey, favorites) => dispatch(actions.removeFavorite(cityKey, favorites));\r\n    const onAddFavorite = (cityKey, cityName, favorites) => dispatch(actions.addFavorite(cityKey, cityName, favorites));\r\n    const colors = {\r\n        selected: '#e31b23',\r\n        notSelected: '#777'\r\n    };\r\n\r\n    const heartStyle = {\r\n        backgroundColor: colors.notSelected\r\n    };\r\n\r\n    if (favoriteCheck(props.cityKey, favorites)) {\r\n        heartStyle.backgroundColor = colors.selected\r\n    };\r\n\r\n    const favoriteHandler = (cityKey, cityName) => {\r\n        if (favoriteCheck(cityKey, favorites)) {\r\n            onRemoveFavorite(cityKey, favorites);\r\n        } else {\r\n            onAddFavorite(cityKey, cityName, favorites);\r\n        };\r\n    };\r\n\r\n    return (\r\n            <div \r\n                className=\"favoriteHeart\"\r\n                style={heartStyle}\r\n                onClick={() => favoriteHandler(props.cityKey, props.cityName)}>\r\n            </div>\r\n    );\r\n};  \r\n\r\nexport default FavoriteHeart","import * as actionTypes from './actionTypes';\r\n\r\nexport const initFavorites = () => {\r\n    let favorites = [];\r\n    const localFavorites = localStorage.getItem('userFav');\r\n    if (localFavorites !== null) {\r\n        favorites = JSON.parse(localFavorites);\r\n    };\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        newFavorites: favorites\r\n    };\r\n};\r\n\r\nexport const removeFavorite = (cityKey, favorites) => {\r\n    let newFavorites = favorites.filter(fav => cityKey !== fav.cityKey);\r\n    localStorage.setItem('userFav', JSON.stringify(newFavorites));\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        newFavorites: newFavorites\r\n    };\r\n};\r\n\r\nexport const addFavorite = (cityKey, cityName, favorites) => {\r\n    let newFavorites = favorites.concat({cityKey: cityKey, cityName: cityName});\r\n    localStorage.setItem('userFav', JSON.stringify(newFavorites));\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        newFavorites: newFavorites\r\n    };\r\n};","export const getIconPath = (iconNumber) => {\r\n    return './icons/' + iconNumber + '-s.png';\r\n};","import React from 'react';\r\nimport FavoriteHeart from '../../UI/FavoriteHeart/FavoriteHeart';\r\n// import SunIcon from '../../../assets/images/weather-icons/01-s.png';\r\nimport { getIconPath } from '../../../shared/getIconPath';\r\n\r\nconst CityHeader = (props) => {\r\n\r\n    return (\r\n        <header className='cityHeader'>\r\n            <div className='cityHeader__details'>\r\n                <p className='cityHeader__details-title'>{props.cCityName}</p>\r\n                <div className=\"cityHeader__details-container\">\r\n                    <img className='cityHeader__icon' src={getIconPath(props.cWeatherIcon)} alt={'dsd'} />\r\n                    <div className=\"cityHeader__details-subContainer\">\r\n                        <p className='cityHeader__details-temp'>{props.cWeatherTemp}°</p>\r\n                        <div className='cityHeader__details-text'><em>{props.cWeatherText}</em></div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            \r\n            <FavoriteHeart \r\n                cityKey={props.cCityKey}\r\n                cityName={props.cCityName} />\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default CityHeader;","export const celToFar = (celcius) => {\r\n   \r\n    return ((celcius * 1.8) + 32).toFixed(0);\r\n};  ","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getIconPath } from '../../../../shared/getIconPath';\r\nimport { getWeekDay } from '../../../../shared/getWeekDay';\r\nimport { celToFar } from '../../../../shared/convertTemp'\r\n\r\n\r\nconst DayForecast = (props) => {\r\n    const { Temperature, Day, Night  } = props.dailyForecast;\r\n    const date = props.dailyForecast.Date;\r\n    const dayIconPath = getIconPath(Day.Icon);\r\n    const nightIconPath = getIconPath(Night.Icon);\r\n    let dayTemp = Math.round(Temperature.Maximum.Value);\r\n    let nightTemp = Math.round(Temperature.Minimum.Value);\r\n    const weekDayNumber = new Date(date).getDay();\r\n    const weekDay = getWeekDay(weekDayNumber);\r\n    const { metric } = useSelector(state => state.userSettings);\r\n\r\n    if (!metric) {\r\n        dayTemp = celToFar(dayTemp);\r\n        nightTemp = celToFar(nightTemp);\r\n    }\r\n\r\n    return (\r\n        <div className='cityForecast__day'>\r\n            <p className='cityForecast__day-title'>{weekDay}</p>\r\n            <div className='cityForecast__day-container'>\r\n                <div className='cityForecast__details'>\r\n                    <p className='cityForecast__details-title'>Day:</p>\r\n                    <p className='cityForecast__details-temp'>{dayTemp}°</p>\r\n                    <img className='cityForecast__icon' src={dayIconPath} alt={'dsd'} />\r\n                </div>\r\n                <div className='cityForecast__details'>\r\n                    <p className='cityForecast__details-title'>Night:</p>\r\n                    <p className='cityForecast__details-temp'>{nightTemp}°</p>\r\n                    <img className='cityForecast__details-icon' src={nightIconPath} alt={'dsd'} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DayForecast;","export const getWeekDay = (weekDayNum) => {\r\n    const weekDayList = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    return weekDayList[weekDayNum];\r\n};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport DayForecast from './DayForecast/DayForecast';\r\n\r\n\r\nconst CityForecast = () => {\r\n\r\n    const { forecasts } = useSelector(state => state.home);\r\n  \r\n    \r\n    let forecastsList = null;\r\n    if (forecasts) {\r\n    \r\n        const { Headline, DailyForecasts} = forecasts;\r\n        forecastsList = (\r\n            <React.Fragment>\r\n                <h1 className='cityForecast__title'><em>{Headline.Text}</em></h1>\r\n                <div className='cityForecast__forecasts'>\r\n                    {DailyForecasts.map(dayForecast => {\r\n                        return <DayForecast \r\n                                    key={dayForecast.EpochDate}\r\n                                    dailyForecast={dayForecast}/>\r\n                    })}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className='cityForecast'>\r\n            {forecastsList}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityForecast;","import React from 'react';\r\nimport sunSpinner from '../../../assets/images/sunLoading.png';\r\n\r\nconst Spinner = (props) => {\r\n    return <img className='spinner' src={sunSpinner} alt='Loading...'></img>\r\n};\r\n\r\nexport default Spinner;","import React, { useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CityHeader from './CityHeader/CityHeader';\r\nimport CityForecast from './CityForecast/CityForecast';\r\nimport * as actions from '../../store/actions/rootActions';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\nconst CurrentCity = () => {\r\n    const { selectedCityKey, selectedCityName, geoLocationArrived, currentWeatherLoading, forecastLoading  } = useSelector(state => state.home); \r\n    const currentWeather = useSelector(state => state.home.currentWeather);\r\n    const { metric } = useSelector(state => state.userSettings);\r\n    const dispatch = useDispatch();\r\n    const onFetchCurrentWeather = useCallback((cityKey) => dispatch(actions.fetchCurrentWeather(cityKey)), [dispatch]);\r\n    const onFetchForecast = useCallback((cityKey) => dispatch(actions.fetchForecast(cityKey)), [dispatch]);\r\n    const onGetGeoLocation = useCallback(() => dispatch(actions.getGeoLocation()), [dispatch]);\r\n\r\n    if (currentWeather) {\r\n        var { WeatherText, WeatherIcon, Temperature } = currentWeather[0];\r\n        var currentTemp = Temperature.Metric.Value;\r\n        if (!metric) {\r\n            currentTemp = Temperature.Imperial.Value;\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        onGetGeoLocation();\r\n    }, [onGetGeoLocation]);\r\n\r\n    useEffect(() => {\r\n        if (selectedCityKey && geoLocationArrived) {\r\n            onFetchForecast(selectedCityKey);\r\n            onFetchCurrentWeather(selectedCityKey);\r\n        };\r\n        \r\n    }, [onFetchCurrentWeather, onFetchForecast, geoLocationArrived, selectedCityKey]);\r\n\r\n    let content = <Spinner />;\r\n\r\n    if (!currentWeatherLoading && !forecastLoading) {\r\n        content = (\r\n            <React.Fragment>\r\n                <CityHeader \r\n                    cWeatherText={WeatherText}\r\n                    cWeatherIcon={WeatherIcon}\r\n                    cWeatherTemp={currentTemp}\r\n                    cCityName={selectedCityName}\r\n                    cCityKey={selectedCityKey} />\r\n                <CityForecast />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='currentCity'>\r\n            {content}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrentCity;","import React from 'react'; \r\nimport SearchCity from '../../components/SearchCity/SearchCity';\r\nimport CurrentCity from '../../components/CurrentCity/CurrentCity';\r\n\r\nconst Home = props => {\r\n\r\n    return (\r\n    <div className='home'>\r\n        <SearchCity />\r\n        <CurrentCity />\r\n    </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst NavLinks = () => {\r\n    return (\r\n        <ul className=\"navigation__list\">\r\n            <li className='navigation__item'>\r\n                <NavLink\r\n                    to={process.env.PUBLIC_URL + \"/\"}\r\n                    exact\r\n                    className='navigation__link'\r\n                    activeClassName=\"navigation__item--active\"\r\n                    >Home\r\n                </NavLink>\r\n            </li>\r\n\r\n            <li className='navigation__item'>\r\n                <NavLink\r\n                    to={process.env.PUBLIC_URL + \"/favorites\"}\r\n                    className='navigation__link'\r\n                    activeClassName=\"navigation__item--active\"\r\n                    >Favorites\r\n                </NavLink>\r\n            </li>\r\n            \r\n            \r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default NavLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Logo = () => {\r\n\r\n    return (\r\n        <Link className='logo' to=\"/\">\r\n            <h1 className=\"logo__title\">Herolo Weather</h1>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\nimport celcius from '../../../assets/images/celsius.svg';\r\nimport fahrenheit  from '../../../assets/images/fahrenheit.svg'\r\nimport { useDispatch, useSelector } from 'react-redux'; \r\nimport * as actions from '../../../store/actions/rootActions';\r\n\r\nconst TempCheckBox = props => {\r\n    const dispatch = useDispatch();\r\n    const metric = useSelector((state) => state.userSettings.metric);\r\n    const onChangeTemp = () => dispatch(actions.changeTemp());\r\n\r\n\r\n    const changeTempHandler = () => {\r\n        onChangeTemp();\r\n    };\r\n\r\n    let tempSignPath =  celcius;\r\n\r\n    if ( !metric ) {\r\n        tempSignPath = fahrenheit;\r\n    };\r\n\r\n    return (\r\n        <div className=\"tempCheckBox\" onClick={changeTempHandler}>\r\n            <p className='tempCheckBox__title'>Temperature</p>\r\n            <img className='tempCheckBox__img' src={tempSignPath} alt='Temp Selector'></img>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TempCheckBox;","import * as actionTypes from './actionTypes';\r\n\r\nexport const changeTemp = () => {\r\n    return {\r\n        type: actionTypes.CHANGE_TEMP\r\n    };\r\n};\r\n\r\nexport const changeTheme = () => {\r\n    return {\r\n        type: actionTypes.CHANGE_THEME\r\n    };\r\n};","import React from 'react';\r\n\r\n\r\nimport NavLinks from './NavLinks/NavLinks'\r\nimport Logo from '../Logo/Logo';\r\nimport TempCheckBox from '../UI/TempCheckBox/TempCheckBox'\r\n\r\nconst Navigation = props => {\r\n    return (\r\n        <div className=\"navigation\">\r\n            <React.Fragment> \r\n                <Logo />\r\n                <NavLinks />\r\n                <div className=\"navigation__settings\">\r\n                    <TempCheckBox />\r\n                    {/* <ThemeSelector /> */}\r\n                </div>\r\n            </React.Fragment>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div>\r\n            FOOTER\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nconst CoverImg = () => {\r\n    // style={{backgroundImage: `url(${CoverImage})`}}\r\n    return(\r\n        <div className=\"coverImg\" >\r\n            123\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default CoverImg;","import React from 'react';\r\n\r\nimport Navigation from '../components/Navigation/Navigation';\r\nimport Footer from '../components/Footer/Footer';\r\nimport CoverImg from '../components/UI/CoverImg/CoverImg';\r\n\r\nconst Layout = props => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CoverImg/>\r\n            <Navigation />\r\n            {/* Pages switcher with Lazy Loading of Favorite component */}\r\n            { props.children }\r\n            <Footer />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Layout;","import React, { Suspense, useEffect, useCallback } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport * as actions from './store/actions/rootActions';\r\n\r\nimport Home from './containers/Home/Home';\r\nimport Layout from './hoc/Layout';\r\n\r\nconst Favorites = React.lazy(() => {\r\n    return import('./containers/Favorites/Favorites');\r\n});\r\n\r\n\r\nconst App = props => {\r\n    const dispatch = useDispatch();\r\n    const onInitFavorites = useCallback(() => dispatch(actions.initFavorites()), [dispatch]);\r\n\r\n    useEffect(() => {\r\n        onInitFavorites();\r\n    }, [onInitFavorites] )\r\n\r\n    let routes = (\r\n        <Switch>\r\n            <Route path={process.env.PUBLIC_URL + \"/favorites\"} component={Favorites}  />\r\n            <Route path={process.env.PUBLIC_URL + \"/\"} component={Home} />\r\n            <Redirect to={process.env.PUBLIC_URL + \"/\"} />\r\n        </Switch>\r\n    ); \r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Layout>\r\n                <Suspense fallback={<p>Loading...</p>}> <main>{ routes }</main>  </Suspense>\r\n            </Layout>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { compose, combineReducers, createStore, applyMiddleware } from 'redux';\nimport { watchHome } from './store/sagas/rootSaga';\nimport { BrowserRouter } from 'react-router-dom';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\nimport homeReducer from './store/reducers/home';\nimport favoriteReducer from './store/reducers/favorites';\nimport userSettingsReducer from './store/reducers/userSettings';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst rootReducer = combineReducers({\n    home: homeReducer,\n    favorites : favoriteReducer,\n    userSettings: userSettingsReducer\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk, sagaMiddleware)\n));\n\nsagaMiddleware.run(watchHome);\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}